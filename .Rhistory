tv_arima
coef(tv_arima)
var_name="direct.home"
study_var=channel_sessions_long[,which(names(channel_sessions_long)==var_name)][[1]]
na_inds=which(is.na(study_var))
tv=channel_sessions_long$tv.spend[-na_inds]
study_var=na.omit(study_var)
date=channel_sessions_long$date[-na_inds]
title_paste="Direct Home"
tv_arima=arima_func(stepwise_model,study_var,tv,freq)
tv_arima
coef(tv_arima)
var_name="paid.brand"
study_var=channel_sessions_long[,which(names(channel_sessions_long)==var_name)][[1]]
na_inds=which(is.na(study_var))
tv=channel_sessions_long$tv.spend[-na_inds]
study_var=na.omit(study_var)
date=channel_sessions_long$date[-na_inds]
title_paste="Paid Brand"
tv_arima=arima_func(stepwise_model,study_var,tv,freq)
tv_arima
coef(tv_arima)
library(tidyr)
library(dplyr)
library(openxlsx)
library(lubridate)
library(ggplot2)
library(gridExtra)
library(forecast)
library(stats)
library(pander)
library(TTR)
library(googlesheets)
source("report_functions.R")
load(file="channel_sessions_long.rda")
freq=52
var_name="organic.net.home"
study_var=channel_sessions_long[,which(names(channel_sessions_long)==var_name)][[1]]
na_inds=which(is.na(study_var))
tv=channel_sessions_long$tv.spend[-na_inds]
study_var=na.omit(study_var)
date=channel_sessions_long$date[-na_inds]
title_paste="Organic Net of Home"
stl_func(study_var,freq)
?stl
tv_arima=arima_func(stepwise_model,study_var,tv,freq)
transformed_plot(tv_arima,tv,title_paste)
?auto.arima
stl(tv_arima)
str(tv_arima)
str(tv_arima$xreg)
library(tidyr)
library(dplyr)
library(openxlsx)
library(lubridate)
library(ggplot2)
library(gridExtra)
library(forecast)
library(stats)
library(pander)
library(TTR)
library(googlesheets)
source("report_functions.R")
load(file="channel_sessions_long.rda")
freq=52
#Pretending Comcast never happened
# comcast_switch_date="2015-05-04"
# adap_switch_date="2015-09-14"
# comcast_ind=which(channel_sessions_long$date>comcast_switch_date & channel_sessions_long$date<adap_switch_date)
# channel_sessions_long$tv.spend[comcast_ind]=0
#Train only through September
# train_end_date="2015-10-01"
# train_end_ind=which(channel_sessions_long$date>=train_end_date)
#
# channel_sessions_long$direct.net.home[train_end_ind]=NA
# channel_sessions_long$direct.home[train_end_ind]=NA
# channel_sessions_long$organic.net.home[train_end_ind]=NA
# channel_sessions_long$organic.home[train_end_ind]=NA
# channel_sessions_long$paid.brand[train_end_ind]=NA
## Organic Net Home Channel
var_name="organic.net.home"
study_var=channel_sessions_long[,which(names(channel_sessions_long)==var_name)][[1]]
na_inds=which(is.na(study_var))
tv=channel_sessions_long$tv.spend[-na_inds]
study_var=na.omit(study_var)
date=channel_sessions_long$date[-na_inds]
title_paste="Organic Net of Home"
tv_arima=arima_func(stepwise_model,study_var,tv,freq)
channel_sessions_long=add_forecast_to_df(channel_sessions_long,tv_arima,var_name)
channel_sessions_long=channel_sessions_long %>% rename(organic.net.home.forecast=forecast)
library(tidyr)
library(dplyr)
library(openxlsx)
library(lubridate)
library(ggplot2)
library(gridExtra)
library(forecast)
library(stats)
library(pander)
library(TTR)
library(googlesheets)
source("report_functions.R")
load(file="channel_sessions_long.rda")
freq=52
#Pretending Comcast never happened
# comcast_switch_date="2015-05-04"
# adap_switch_date="2015-09-14"
# comcast_ind=which(channel_sessions_long$date>comcast_switch_date & channel_sessions_long$date<adap_switch_date)
# channel_sessions_long$tv.spend[comcast_ind]=0
#Train only through September
# train_end_date="2015-10-01"
# train_end_ind=which(channel_sessions_long$date>=train_end_date)
#
# channel_sessions_long$direct.net.home[train_end_ind]=NA
# channel_sessions_long$direct.home[train_end_ind]=NA
# channel_sessions_long$organic.net.home[train_end_ind]=NA
# channel_sessions_long$organic.home[train_end_ind]=NA
# channel_sessions_long$paid.brand[train_end_ind]=NA
## Organic Net Home Channel
var_name="organic.net.home"
study_var=channel_sessions_long[,which(names(channel_sessions_long)==var_name)][[1]]
na_inds=which(is.na(study_var))
tv=channel_sessions_long$tv.spend[-na_inds]
study_var=na.omit(study_var)
date=channel_sessions_long$date[-na_inds]
title_paste="Organic Net of Home"
###ARIMAX model with TV spend
tv_arima=arima_func(stepwise_model,study_var,tv,freq)
###Forecasts
channel_sessions_long=add_forecast_to_df(channel_sessions_long,tv_arima,var_name)
channel_sessions_long=channel_sessions_long %>% rename(organic.net.home.forecast=forecast)
tv_arima
arima.order=as.character(arimaorder(tv_arima))
if (length(arima.order)>3){
p_s=as.numeric(arima.order[5])
d_s=as.numeric(arima.order[6])
} else {
p_s=0
d_s=0
}
p=as.numeric(arima.order[1])
d=as.numeric(arima.order[2])
combined_obs=p+d+p_s+d_s+1
combined_obs
?SMA
lin_coef=coef(tv_arima)[grep("tv",names(coef(tv_arima)))][1]
sqr_coef=coef(tv_arima)[grep("tv",names(coef(tv_arima)))][2]
tv_lift=lin_coef*SMA(channel_sessions_long$tv.spend,combined_obs)+sqr_coef*SMA(channel_sessions_long$tv.spend^2,combined_obs)
channel_sessions_long$organic.net.home.lift=tv_lift
ggplot(channel_sessions_long)+
geom_line(aes(x=date,y=organic.net.home))+
geom_line(aes(x=date,y=organic.net.home.lift))
library(tidyr)
library(dplyr)
library(openxlsx)
library(lubridate)
library(ggplot2)
library(gridExtra)
library(forecast)
library(stats)
library(pander)
library(TTR)
library(googlesheets)
source("report_functions.R")
load(file="channel_sessions_long.rda")
freq=52
#Pretending Comcast never happened
# comcast_switch_date="2015-05-04"
# adap_switch_date="2015-09-14"
# comcast_ind=which(channel_sessions_long$date>comcast_switch_date & channel_sessions_long$date<adap_switch_date)
# channel_sessions_long$tv.spend[comcast_ind]=0
#Train only through September
# train_end_date="2015-10-01"
# train_end_ind=which(channel_sessions_long$date>=train_end_date)
#
# channel_sessions_long$direct.net.home[train_end_ind]=NA
# channel_sessions_long$direct.home[train_end_ind]=NA
# channel_sessions_long$organic.net.home[train_end_ind]=NA
# channel_sessions_long$organic.home[train_end_ind]=NA
# channel_sessions_long$paid.brand[train_end_ind]=NA
## Organic Net Home Channel
var_name="organic.net.home"
study_var=channel_sessions_long[,which(names(channel_sessions_long)==var_name)][[1]]
na_inds=which(is.na(study_var))
tv=channel_sessions_long$tv.spend[-na_inds]
study_var=na.omit(study_var)
date=channel_sessions_long$date[-na_inds]
title_paste="Organic Net of Home"
tv_arima=arima_func(stepwise_model,study_var,tv,freq)
channel_sessions_long=add_forecast_to_df(channel_sessions_long,tv_arima,var_name)
channel_sessions_long=channel_sessions_long %>% rename(organic.net.home.forecast=forecast)
arima.order=as.character(arimaorder(tv_arima))
if (length(arima.order)>3){
p_s=as.numeric(arima.order[5])
d_s=as.numeric(arima.order[6])
} else {
p_s=0
d_s=0
}
p=as.numeric(arima.order[1])
d=as.numeric(arima.order[2])
combined_obs=p+d+p_s+d_s+1
combined_obs
lin_coef=coef(tv_arima)[grep("tv",names(coef(tv_arima)))][1]
sqr_coef=coef(tv_arima)[grep("tv",names(coef(tv_arima)))][2]
tv_lift=lin_coef*SMA(channel_sessions_long$tv.spend,combined_obs)+sqr_coef*SMA(channel_sessions_long$tv.spend^2,combined_obs)
channel_sessions_long$organic.net.home.lift=tv_lift
ggplot(channel_sessions_long)+
geom_line(aes(x=date,y=organic.net.home))+
geom_line(aes(x=date,y=organic.net.home.forecast))+
geom_line(aes(x=date,y=organic.net.home.lift))
ggplot(channel_sessions_long)+theme_bw()
geom_line(aes(x=date,y=organic.net.home),color="Observed")+
geom_line(aes(x=date,y=organic.net.home.forecast),color="Fit")+
geom_line(aes(x=date,y=organic.net.home.lift),"Approximate Lift")
ggplot(channel_sessions_long)+theme_bw()
geom_line(aes(x=date,y=organic.net.home,color="Observed"))+
geom_line(aes(x=date,y=organic.net.home.forecast,color="Fit"))+
geom_line(aes(x=date,y=organic.net.home.lift,"Approximate Lift"))
ggplot(channel_sessions_long)+theme_bw()+
geom_line(aes(x=date,y=organic.net.home,color="Observed"))+
geom_line(aes(x=date,y=organic.net.home.forecast,color="Fit"))+
geom_line(aes(x=date,y=organic.net.home.lift,"Approximate Lift"))
ggplot(channel_sessions_long)+theme_bw()+
geom_line(aes(x=date,y=organic.net.home,color="Observed"))+
geom_line(aes(x=date,y=organic.net.home.forecast,color="Fit"))+
geom_line(aes(x=date,y=organic.net.home.lift,color="Approximate Lift"))
ggplot(channel_sessions_long)+theme_bw()+
geom_line(aes(x=date,y=organic.net.home,color="Observed"))+
geom_line(aes(x=date,y=organic.net.home.forecast,color="Fit"))+
geom_line(aes(x=date,y=organic.net.home.lift,color="Approximate Lift"))+
ggtitle("Model Fits")+xlab("Date")+ylab("Sessions")+
guides(color=guide_legend(title=""))
qplot(channel_sessions_long$tv.spend,channel_sessions_long$organic.net.home.lift)
combined_obs=1
tv_lift=lin_coef*SMA(channel_sessions_long$tv.spend,combined_obs)+sqr_coef*SMA(channel_sessions_long$tv.spend^2,combined_obs)
channel_sessions_long$organic.net.home.lift=tv_lift
ggplot(channel_sessions_long)+theme_bw()+
geom_line(aes(x=date,y=organic.net.home,color="Observed"))+
geom_line(aes(x=date,y=organic.net.home.forecast,color="Fit"))+
geom_line(aes(x=date,y=organic.net.home.lift,color="Approximate Lift"))+
ggtitle("Model Fits")+xlab("Date")+ylab("Sessions")+
guides(color=guide_legend(title=""))
qplot(channel_sessions_long$tv.spend,channel_sessions_long$organic.net.home.lift)
combined_obs=p+d+p_s+d_s+1
tv_lift=lin_coef*SMA(channel_sessions_long$tv.spend,combined_obs)+sqr_coef*SMA(channel_sessions_long$tv.spend^2,combined_obs)
channel_sessions_long$organic.net.home.lift=tv_lift
ggplot(channel_sessions_long)+theme_bw()+
geom_line(aes(x=date,y=organic.net.home,color="Observed"))+
geom_line(aes(x=date,y=organic.net.home.forecast,color="Fit"))+
geom_line(aes(x=date,y=organic.net.home.lift,color="Approximate Lift"))+
ggtitle("Model Fits")+xlab("Date")+ylab("Sessions")+
guides(color=guide_legend(title=""))
qplot(channel_sessions_long$tv.spend,channel_sessions_long$organic.net.home.lift)
250000/3000
Sys.Date()
class(Sys.Date())
as.character(Sys.Date())
source("TV_channel_models_lite.Rmd")
library(tidyr)
library(dplyr)
library(openxlsx)
library(lubridate)
library(ggplot2)
library(gridExtra)
library(forecast)
library(stats)
library(pander)
library(TTR)
library(googlesheets)
source("report_functions.R")
load(file="channel_sessions_long.rda")
freq=52
var_name="paid.brand"
study_var=channel_sessions_long[,which(names(channel_sessions_long)==var_name)][[1]]
na_inds=which(is.na(study_var))
tv=channel_sessions_long$tv.spend[-na_inds]
study_var=na.omit(study_var)
date=channel_sessions_long$date[-na_inds]
title_paste="Paid Brand"
poly_fit=report_poly_fit_2(study_var,tv)
report_poly_fit_2_sub(poly_fit,study_var)
stepwise_model=step_model(study_var,tv)
step_pander(stepwise_model)
poly_plots(tv,study_var,poly_fit,stepwise_model)
tv_arima=arima_func(stepwise_model,study_var,tv,freq)
arima_func_sub(tv_arima,stepwise_model,study_var,tv,freq)
tv_arima
model_validation(tv_arima,study_var,tv,freq,date)
ts_var=ts(study_var, frequency = freq)
stl_obj=try(stl(ts_var, s.window="periodic",robust=TRUE))
if (class(stl_obj)=="try-error") {
ts_var=study_var
}
xreg_matrix<-model.matrix(study_var~tv+I(tv^2))
xreg_matrix=xreg_matrix[,-1]
pred_hor=5
n <- length(ts_var)
k <- round(n*(1/2)); if (k<60) k=60 # minimum data length for fitting a model
eff=n-k-pred_hor
MAPE<- matrix(NA,eff)
order=arimaorder(tv_arima)
eff
n <- length(ts_var)
n
model_validation=function(tv_arima,study_var,tv,freq,date){
#forcing ts form
ts_var=ts(study_var, frequency = freq)
stl_obj=try(stl(ts_var, s.window="periodic",robust=TRUE))
if (class(stl_obj)=="try-error") {
ts_var=study_var
}
#building exogeneous regressors
xreg_matrix<-model.matrix(study_var~tv+I(tv^2))
xreg_matrix=xreg_matrix[,-1]
pred_hor=5
n <- length(ts_var)
k <- round(n*.7); if (k<60) k=60 # minimum data length for fitting a model
eff=n-k-pred_hor
if (eff<10) {
print("There is not enough data points to validate this model")
return(NULL)
}
MAPE<- matrix(NA,eff)
order=arimaorder(tv_arima)
for(i in 1:eff){
# print(i)
xshort <-ts_var[1:(k+(i-1))]
xnext <- ts_var[(k+i):(k+(i-1)+pred_hor)]
xreg_matrix_short=xreg_matrix[1:(k+(i-1)),]
xreg_matrix_next=xreg_matrix[(k+i):(k+(i-1)+pred_hor),]
fit2 <- Arima(xshort, model=tv_arima,xreg=xreg_matrix_short,method="ML")
# fit2 <- Arima(xshort, order=order[1:3], seasonal=order[4:6],xreg=xreg_matrix_short)
fcast2 <- forecast(fit2,xreg=xreg_matrix_next)
fcast_pred=fcast2[['mean']]
# plot(fcast_pred)
# plot(c(xshort,xnext))
# c(sub_study$tv.spend[1:(k+(i-1))])
MAPE[i] <- mean(abs(fcast_pred-xnext)/xnext)*100
}
qplot(date[(k+pred_hor+1):n],MAPE)+theme_bw()+geom_smooth(method="lm")+
ggtitle(paste("ARIMA Model Validation, Forecast Window of",pred_hor))+ylab("Mean Absolute Percent Error")+xlab("Additional Training Points")
} # end of model_validation
add_forecast_to_df=function(channel_sessions_long,tv_arima,var_name,tv){
rows=nrow(channel_sessions_long)
var_ind=which(names(channel_sessions_long)==var_name)
study_var=channel_sessions_long[,var_ind][[1]]
na_inds=which(is.na(study_var))
tv=channel_sessions_long$tv.spend[-na_inds]
study_var=na.omit(study_var)
#Fitting old values
xreg_matrix<-model.matrix(study_var~tv+I(tv^2))
xreg_matrix=xreg_matrix[,-1]
fcast2 <- forecast(tv_arima,xreg=xreg_matrix)
fcast_pred=fcast2[['mean']]
#Forecasting new values
if (sum(which(diff(na_inds)>1))>0) {
new_tv_start_ind=na_inds[which(diff(na_inds)>1)[length(which(diff(na_inds)>1))]+1]
} else {
new_tv_start_ind=na_inds[1]
}
tv_next=channel_sessions_long$tv.spend[new_tv_start_ind:rows]
xreg_matrix_next=matrix(c(tv_next,tv_next^2),ncol=2)
fcast3 <- forecast(tv_arima,xreg=xreg_matrix_next,level=80)
fcast_pred_next=fcast3[['mean']]
full_forecast_fit=as.vector(c(as.vector(fitted(tv_arima)),fcast_pred_next))
channel_sessions_long$forecast=NA
channel_sessions_long$forecast[(rows-length(full_forecast_fit)+1):rows]=full_forecast_fit
#check package forecasts against
#  plot(fcast2)
# plot(fcast3)
# plot(channel_sessions_long$forecast)
# lines(study_var)
#Make a good ggplot!
plot_date=channel_sessions_long$date[(rows-length(full_forecast_fit)+1):rows]
plot_var=channel_sessions_long[((rows-length(full_forecast_fit)+1):rows),var_ind][[1]]
low=fcast3$lower[1:length(fcast_pred_next)]
plot_lower=c(rep(NA,(length(full_forecast_fit))-length(low)),low)
up=fcast3$upper[1:length(fcast_pred_next)]
plot_upper=c(rep(NA,(length(full_forecast_fit))-length(up)),up)
temp_df=data.frame(plot_date,full_forecast_fit,plot_var,plot_lower,plot_upper)
#This should not be hard coded
# plot_start="2015-07-01"
# plot_length=length(which(channel_sessions_long$date>plot_start))
plot_length=24
plot(ggplot(temp_df[(nrow(temp_df)-plot_length):nrow(temp_df),])+theme_bw()+
geom_point(aes(x=plot_date,y=plot_var,color="Observed"))+
geom_line(aes(x=plot_date,y=full_forecast_fit,color="Modeled"))+
geom_line(aes(x=plot_date,y=plot_lower,color="Lower Bound, \n %80 Confidence"))+
geom_line(aes(x=plot_date,y=plot_upper,color="Upper Bound, \n %80 Confidence"))+
ggtitle("Model Fit and Forecast")+xlab("Date")+ylab("Sessions")+
theme(legend.title=element_blank()))
return(channel_sessions_long)
} # end of add_forecast_to_df
model_validation(tv_arima,study_var,tv,freq,date)
?geom_smooth
tv_arima
library(tidyr)
library(dplyr)
library(openxlsx)
library(lubridate)
library(ggplot2)
library(gridExtra)
library(forecast)
library(stats)
library(pander)
library(TTR)
library(googlesheets)
source("report_functions.R")
load(file="channel_sessions_long.rda")
freq=52
#Pretending Comcast never happened
# comcast_switch_date="2015-05-04"
# adap_switch_date="2015-09-14"
# comcast_ind=which(channel_sessions_long$date>comcast_switch_date & channel_sessions_long$date<adap_switch_date)
# channel_sessions_long$tv.spend[comcast_ind]=0
#Train only through September
# train_end_date="2015-10-01"
# train_end_ind=which(channel_sessions_long$date>=train_end_date)
#
# channel_sessions_long$direct.net.home[train_end_ind]=NA
# channel_sessions_long$direct.home[train_end_ind]=NA
# channel_sessions_long$organic.net.home[train_end_ind]=NA
# channel_sessions_long$organic.home[train_end_ind]=NA
# channel_sessions_long$paid.brand[train_end_ind]=NA
## Organic Net Home Channel
var_name="organic.net.home"
study_var=channel_sessions_long[,which(names(channel_sessions_long)==var_name)][[1]]
na_inds=which(is.na(study_var))
tv=channel_sessions_long$tv.spend[-na_inds]
study_var=na.omit(study_var)
date=channel_sessions_long$date[-na_inds]
title_paste="Organic Net of Home"
###ARIMAX model with TV spend
tv_arima=arima_func(stepwise_model,study_var,tv,freq)
###Forecasts
channel_sessions_long=add_forecast_to_df(channel_sessions_long,tv_arima,var_name)
channel_sessions_long=channel_sessions_long %>% rename(organic.net.home.forecast=forecast)
lin_coef=coef(tv_arima)[grep("tv",names(coef(tv_arima)))][1]
sqr_coef=coef(tv_arima)[grep("tv",names(coef(tv_arima)))][2]
tv_lift=lin_coef*channel_sessions_long$tv.spend+sqr_coef*channel_sessions_long$tv.spend^2
tv_lm_on_lift=lm(organic.net.home.lift~tv.spend+0,data=channel_sessions_long)
channel_sessions_long$organic.net.home.lift=tv_lift
tv_lm_on_lift=lm(organic.net.home.lift~tv.spend+0,data=channel_sessions_long)
tv_lm_on_lift
str(tv_lm_on_lift)
coef(tv_lm_on_lift)
tv_lm_on_lift=lm(organic.net.home.lift~tv.spend+I(tv^2)+0,data=channel_sessions_long)
tv_lm_on_lift=lm(organic.net.home.lift~tv.spend+I(tv.spend^2)+0,data=channel_sessions_long)
tv_lm_on_lift
summary(tv_lm_on_lift)
confint(tv_lm_on_lift, level = .8,)
confint(tv_lm_on_lift, level = .8)
conf_coefs=coef(confint(tv_lm_on_lift, level = .8))
conf_obj=confint(tv_lm_on_lift, level = .8)
str(conf_obj)
str(conf_obj[[1]])
str(conf_obj[1)
str(conf_obj[1])
conf_obj[1]
conf_obj[2]
lin_coef=coef(tv_arima)[grep("tv",names(coef(tv_arima)))][1]
sqr_coef=coef(tv_arima)[grep("tv",names(coef(tv_arima)))][2]
tv_lift=lin_coef*channel_sessions_long$tv.spend+sqr_coef*channel_sessions_long$tv.spend^2
channel_sessions_long$organic.net.home.lift=tv_lift
#extracting confidence interval bounds
tv_lm_on_lift=lm(organic.net.home.lift~tv.spend+I(tv.spend^2)+0,data=channel_sessions_long)
conf_obj=confint(tv_lm_on_lift, level = .8)
#fitting low bounds
tv_lift_low_bound=conf_obj[1]*channel_sessions_long$tv.spend+conf_obj[2]*channel_sessions_long$tv.spend^2
channel_sessions_long$organic.net.home.lift.low.bound=tv_lift_low_bound
#fitting high bounds
tv_lift_high_bound=conf_obj[3]*channel_sessions_long$tv.spend+conf_obj[3]*channel_sessions_long$tv.spend^2
channel_sessions_long$organic.net.home.lift.high.bound=tv_lift_high_bound
ggplot(channel_sessions_long)+
geom_line(aes(x=date,y=organic.net.home))+
geom_line(aes(x=date,y=organic.net.home.lift.low.bound))+
geom_line(aes(x=date,y=organic.net.home.lift))+
geom_line(aes(x=date,y=organic.net.home.lift.high.bound))
tv_lift_high_bound=conf_obj[3]*channel_sessions_long$tv.spend+conf_obj[4]*channel_sessions_long$tv.spend^2
channel_sessions_long$organic.net.home.lift.high.bound=tv_lift_high_bound
ggplot(channel_sessions_long)+
geom_line(aes(x=date,y=organic.net.home))+
geom_line(aes(x=date,y=organic.net.home.lift.low.bound))+
geom_line(aes(x=date,y=organic.net.home.lift))+
geom_line(aes(x=date,y=organic.net.home.lift.high.bound))
ggplot(channel_sessions_long)+
geom_line(aes(x=date,y=organic.net.home.lift.low.bound))
ggplot(channel_sessions_long)
geom_line(aes(x=date,y=organic.net.home.lift))
ggplot(channel_sessions_long)
ggplot(channel_sessions_long)+
geom_line(aes(x=date,y=organic.net.home.lift))
summary(tv_lm_on_lift)
ggplot(channel_sessions_long)+
geom_line(aes(x=date,y=organic.net.home.lift.low.bound))+
geom_line(aes(x=date,y=organic.net.home.lift))+
geom_line(aes(x=date,y=organic.net.home.lift.high.bound))
diff(tv_lift_low_bound,tv_lift)
hist(tv_lift_low_bound-tv_lift)
load(file="channel_sessions_long.rda")
var_name="organic.net.home"
study_var=channel_sessions_long[,which(names(channel_sessions_long)==var_name)][[1]]
na_inds=which(is.na(study_var))
tv=channel_sessions_long$tv.spend[-na_inds]
study_var=na.omit(study_var)
date=channel_sessions_long$date[-na_inds]
title_paste="Organic Net of Home"
tv_arima=arima_func(stepwise_model,study_var,tv,freq)
lin_coef=coef(tv_arima)[grep("tv",names(coef(tv_arima)))][1]
sqr_coef=coef(tv_arima)[grep("tv",names(coef(tv_arima)))][2]
session_dummy=lin_coef*tv+sqr_coef*tv^2
