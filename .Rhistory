plot(x=channel_sessions_tv_pred$date,y=resids)
qplot(channel_sessions_tv_pred$tv.spend,predictions)
plot(channel_sessions_tv_pred$tv.spend,predictions)
t=Box.test(resids)
round(t$p.value,4)
plot(x=channel_sessions_tv_pred$date,y=resids)
load(file="channel_sessions_long.rda")
na_date=which(is.na(channel_sessions_long$date))
if (length(na_date)>0) channel_sessions_long=channel_sessions_long[-na_date,]
channel_sessions_long$GMV=NULL
train_end_date="2015-11-02"
train_end_ind=which(channel_sessions_tv_pred$date>=train_end_date)
channel_sessions_tv_pred=channel_sessions_tv_pred[-train_end_ind,]
channel_sessions_tv_pred=na.omit(channel_sessions_tv_pred)
lm_fit=lm(channel_sessions_tv_pred$tv.spend~0+
channel_sessions_tv_pred$direct.net.home+
channel_sessions_tv_pred$direct.home+
channel_sessions_tv_pred$organic.net.home+
channel_sessions_tv_pred$organic.home+
channel_sessions_tv_pred$paid.brand+
I(channel_sessions_tv_pred$direct.net.home^.5)+
I(channel_sessions_tv_pred$direct.home^.5)+
I(channel_sessions_tv_pred$organic.net.home^.5)+
I(channel_sessions_tv_pred$organic.home^.5)+
I(channel_sessions_tv_pred$paid.brand^.5))
summary(lm_fit)
plot(lm_fit)
View(channel_sessions_tv_pred)
xreg_matrix<-model.matrix(formular(lm_fit))
xreg_matrix<-model.matrix(formula(lm_fit))
xreg_matrix
View(xreg_matrix)
tv_arima=auto.arima(channel_sessions_tv_pred$tv.spend,xreg=xreg_matrix,
allowdrift=FALSE,allowmean=FALSE,stepwise=FALSE,approx=FALSE)
arimaorder(tv_arima)
coef(tv_arima)
round(cor(fitted(tv_arima),channel_sessions_tv_pred$tv.spend)^2,2)
t=Box.test(tv_arima$residuals)
round(t$p.value,4)
library(caret)
install.packages("caret")
library(caret)
inTrain = createDataPartition(y=channel_sessions_tv_pred$tv.spend, p = .6)[[1]]
training = channel_sessions_tv_pred[ inTrain,]
testing = channel_sessions_tv_pred[-inTrain,]
lm_fit=lm(training$tv.spend~0+
training$direct.net.home+
training$direct.home+
training$organic.net.home+
training$organic.home+
training$paid.brand+
I(training$direct.net.home^.5)+
I(training$direct.home^.5)+
I(training$organic.net.home^.5)+
I(training$organic.home^.5)+
I(training$paid.brand^.5))
summary(lm_fit)
predict(lm_fit,newdata= training)
cor(test_pred,training$tv.spend)^2
test_pred=predict(lm_fit,newdata= training)
cor(test_pred,training$tv.spend)^2
cor(test_pred,testing$tv.spend)^2
summary(lm_fit)
test_pred=predict(lm_fit,newdata= testing)
length(test_pred)
dim(testing)
?predict
test_pred=predict.lm(lm_fit,newdata=testing)
lm_fit
str(testing)
(testing)
test_pred=predict.lm(lm_fit,newdata=testing[,-1])
test_pred=predict(lm_fit,newdata=testing)
test_pred
fitted(lm_fit)
test_pred=predict(lm_fit,newdata=data.frame(testing))
test_pred=predict(lm_fit,newdata=data.frame(testing[,-1]))
length(training)
dim(training)
test_pred=predict(formula(lm_fit),newdata=data.frame(testing[,-1]))
test_pred=predict(formula(lm_fit),newdata=testing)
formula(lm_fit)
test_pred=predict(lm_fit,newdata=t(testing))
test_pred=predict(lm_fit,newdata=testing[-c(1,2),])
test_pred=predict(lm_fit,newdata=testing[,-c(1,2)])
test_pred=predict(lm_fit,newdata=t(data.frame(testing)))
t(data.frame(testing))
testing
test_pred=predict(lm_fit,newdata=testing)
colnames(training)
colnames(testing)
lm_fit=lm(training$tv.spend~0+
training$direct.net.home+
training$direct.home+
training$organic.net.home+
training$organic.home+
training$paid.brand+
)
summary(lm_fit)
lm_fit=lm(training$tv.spend~0+
training$direct.net.home+
training$direct.home+
training$organic.net.home+
training$organic.home+
training$paid.brand+
)
lm_fit=lm(training$tv.spend~0+
training$direct.net.home+
training$direct.home+
training$organic.net.home+
training$organic.home+
training$paid.brand
)
summary(lm_fit)
test_pred=predict(lm_fit,newdata=testing)
colnames(training)
colnames(testing)
colnames(training) %in% colnames(testing)
formula(lm_fit)
arima_tv
tv_arima
formula(tv_arima)
formula(lm_fit)
lm_fit=lm(training$tv.spend~
training$direct.net.home+
training$direct.home+
training$organic.net.home+
training$organic.home+
training$paid.brand
)
summary(lm_fit)
test_pred=predict(lm_fit,newdata=testing)
cor(test_pred,testing$tv.spend)^2
test_pred=predict(lm_fit,newdata=testing,type="response")
test_pred=predict(lm_fit,newdata=testing, interval = "prediction")
lm_fit=lm(training$tv.spend~
training$direct.net.home+
training$direct.home+
training$organic.net.home+
training$organic.home+
training$paid.brand)
summary(lm_fit)
test_pred=predict(lm_fit,newdata=testing, interval = "prediction")
lm_fit=lm(data=training,tv.spend~direct.net.home+direct.home+organic.net.home+organic.home+paid.brand+
I(direct.net.home^.5)+I(direct.home^.5)+I(organic.net.home^.5)+I(organic.home^.5)+I(paid.brand^.5))
summary(lm_fit)
test_pred=predict(lm_fit,newdata=testing, interval = "prediction")
cor(test_pred,testing$tv.spend)^2
test_pred=predict(lm_fit,newdata=testing)
test_pred
cor(test_pred,testing$tv.spend)^2
dim(training)
dim(testing)
debugSource('~/GitHub/Ritani/TV_forecaster.R', echo=TRUE)
library(tidyr)
library(dplyr)
library(openxlsx)
library(lubridate)
library(ggplot2)
library(gridExtra)
library(forecast)
library(stats)
library(pander)
library(TTR)
library(googlesheets)
library(glmnet)
library(caret)
load(file="channel_sessions_long.rda")
na_date=which(is.na(channel_sessions_long$date))
if (length(na_date)>0) channel_sessions_long=channel_sessions_long[-na_date,]
channel_sessions_long$GMV=NULL
train_end_date="2015-11-02"
train_end_ind=which(channel_sessions_tv_pred$date>=train_end_date)
channel_sessions_tv_pred=channel_sessions_tv_pred[-train_end_ind,]
channel_sessions_tv_pred=na.omit(channel_sessions_tv_pred)
inTrain = createDataPartition(y=channel_sessions_tv_pred$tv.spend, p = .6)[[1]]
training = channel_sessions_tv_pred[ inTrain,]
testing = channel_sessions_tv_pred[-inTrain,]
train_end_date="2015-11-02"
train_end_ind=which(channel_sessions_tv_pred$date>=train_end_date)
channel_sessions_tv_pred=channel_sessions_tv_pred[-train_end_ind,]
channel_sessions_tv_pred=na.omit(channel_sessions_tv_pred)
train_end_date="2015-11-02"
train_end_ind=which(channel_sessions_tv_pred$date>=train_end_date)
channel_sessions_tv_pred=channel_sessions_long[-train_end_ind,]
load(file="channel_sessions_long.rda")
na_date=which(is.na(channel_sessions_long$date))
if (length(na_date)>0) channel_sessions_long=channel_sessions_long[-na_date,]
channel_sessions_long$GMV=NULL
train_end_date="2015-11-02"
train_end_ind=which(channel_sessions_tv_pred$date>=train_end_date)
channel_sessions_tv_pred=channel_sessions_long[-train_end_ind,]
View(channel_sessions_long)
train_end_date="2015-11-02"
train_end_ind=which(channel_sessions_tv_pred$date>=train_end_date)
train_end_ind
View(channel_sessions_long)
train_end_date="2015-11-01"
train_end_ind=which(channel_sessions_tv_pred$date>=train_end_date)
train_end_ind
train_end_ind=which(channel_sessions_long$date>=train_end_date)
channel_sessions_tv_pred=channel_sessions_long[-train_end_ind,]
View(channel_sessions_tv_pred)
channel_sessions_tv_pred=na.omit(channel_sessions_tv_pred)
View(channel_sessions_tv_pred)
inTrain = createDataPartition(y=channel_sessions_tv_pred$tv.spend, p = .6)[[1]]
training = channel_sessions_tv_pred[ inTrain,]
testing = channel_sessions_tv_pred[-inTrain,]
lm_fit=lm(data=training,tv.spend~direct.net.home+direct.home+organic.net.home+organic.home+paid.brand+
I(direct.net.home^.5)+I(direct.home^.5)+I(organic.net.home^.5)+I(organic.home^.5)+I(paid.brand^.5))
summary(lm_fit)
test_pred=predict(lm_fit,newdata=testing)
cor(test_pred,testing$tv.spend)^2
x <- model.matrix(formula(lm_fit))
formula(lm_fit)
?model.matrix
x <- model.matrix(formula(lm_fit),data=training)
View(x)
x=x[,-1]
View(x)
y<- as.matrix(training$tv.spend)
fit<-glmnet(x,y, family="gaussian", alpha=0.9, lambda=0.001,intercept=FALSE)
coefficients(fit)
predictions <- predict(fit, x, type="link")
R2 <- cor(y,predictions)^2
R2
predictions <- predict(fit, x)
cor(y,predictions)^2
test_x=model.matrix(formula(lm_fit),data=testing)
predictions <- predict(fit, test_x)
test_x=test_x[,-1]
predictions <- predict(fit, test_x)
test_y=as.matric(testing$tv.spend)
test_y=as.matrix(testing$tv.spend)
test_x=model.matrix(formula(lm_fit),data=testing)
test_x=test_x[,-1]
test_predictions <- predict(fit, test_x)
test_y=as.matrix(testing$tv.spend)
cor(test_y,test_predictions)^2
cor(y,predictions)^2
predictions <- predict(fit, x)
cor(y,predictions)^2
cor(lm_fit)
summary(lm_fit)
cor(test_pred,testing$tv.spend)^2
cor(y,predictions)^2
cor(test_y,test_predictions)^2
coefficients(fit)
coef(fit)
round(coef(fit),2)
cor(y,predictions)^2
cor(test_y,test_predictions)^2
round(coef(stepwise_model)[1:7]/sum(coef(stepwise_model)[1:7]),3)
library(tidyr)
library(dplyr)
library(corrplot)
library(glmnet)
source("Ritani_log_analysis_DB_connection.R")
query=paste("
SELECT order_number, name AS channel, state,
max(total) AS revenue, count(*) as session_count
FROM (
SELECT channel_id, clickstream_id, session_id
FROM channel_touchpoints
) ct INNER JOIN (
SELECT id, name, has_attributed_revenue
FROM channels
) ch ON ct.channel_id=ch.id
INNER JOIN (
SELECT id, pre_purchase
FROM sessions
WHERE pre_purchase=1
) se ON ct.session_id=se.id
INNER JOIN (
SELECT id, order_number, total, state
FROM clickstreams
) cl ON ct.clickstream_id=cl.id
GROUP BY order_number, channel
HAVING state LIKE '%shipped%' OR state LIKE '%accepted%' OR state LIKE '%delivered%'
OR state LIKE '%store%' OR state LIKE '%charged%' OR state LIKE '%authorized%'
OR state LIKE '%shipped%'
")
data_long=tbl_df(dbGetQuery(con,query))
#ditching some data
data_long$state=NULL
data_long=data_long[-which(data_long$channel=="unknown"),]
data_long=data_long[-which(data_long$channel=="tv"),]
data_long=data_long[-which(data_long$channel=="session continuation"),]
#check channel distribution
data_long %>% group_by(channel) %>%  summarise(count=n()) %>% arrange(desc(count))
#reassign some channel names
disp_inds=grep("display",data_long$channel)
data_long$channel[disp_inds]="display"
email_inds=grep("email",data_long$channel)
data_long$channel[email_inds]="email"
email_inds=grep("paid",data_long$channel)
data_long$channel[email_inds]="paid"
email_inds=grep("organic",data_long$channel)
data_long$channel[email_inds]="organic"
#combine displays and combine emails by order
data_long=data_long %>% group_by(order_number,channel) %>%
summarise(revenue=max(revenue),session_count=sum(session_count))
#recheck channel distribution with corrections
data_long %>% group_by(channel) %>%  summarise(count=n()) %>% arrange(desc(count))
data_long %>% group_by(order_number) %>%  summarise(count=n()) %>% arrange(desc(count))
#need to resample to adjust for class imbalance
#duplicating instead of resampling due to order_number spreading difficulties
channel_levels=levels(as.factor(data_long$channel))
resampled_data_frame=data.frame()
for (channel in channel_levels){
ch_inds=which(data_long$channel==channel)
for (i in 1:round(30000/length(ch_inds))){
temp=data_long[ch_inds,]
temp$order_number=paste0(temp$order_number,i)
resampled_data_frame=rbind(resampled_data_frame,temp)
}
}
#recheck channel distribution with resampling
resampled_data_frame %>% group_by(channel) %>%  summarise(count=n(),revenue=mean(revenue)) %>% arrange(desc(count))
# putting data in wide form
data_wide=resampled_data_frame %>%   spread(key=channel,value=session_count)
#fix column names
names(data_wide) <- sub(" ", ".", names(data_wide))
#setting all missings to 0
numeric_inds=sapply(data_wide,is.numeric)
data_wide[,numeric_inds]=apply(data_wide[,numeric_inds],2,function(x){
na_inds=which(is.na(x))
if (length(na_inds)>0){
x[na_inds]=0
} else {
x
}
x
})
#combining orders for total sessions by each channel
data_wide=data_wide %>% group_by(order_number) %>% summarise(revenue=mean(revenue),
affiliates=sum(affiliates),direct=sum(direct),display=sum(display),email=sum(email),
organic=sum(organic),paid=sum(paid),referral=sum(referral))
#order_number is irrelevant now
data_wide$order_number=NULL
##Sanity checks
row_sums=apply(data_wide[,2:8],1,function(x){sum(x)})
summary(row_sums)
sd(row_sums)
qplot(row_sums)
#omitting outrageously high session counts
high_inds=which(row_sums> (mean(row_sums)+10*sd(row_sums)))
if (length(high_inds)) data_wide=data_wide[-high_inds,]
summary(data_wide$revenue)
sd(data_wide$revenue)
qplot(data_wide$revenue)
#omitting outrageously revenue
high_inds=which(data_wide$revenue> (mean(data_wide$revenue)+10*sd(data_wide$revenue)))
if (length(high_inds)) data_wide=data_wide[-high_inds,]
row_sums=apply(data_wide[,2:8],1,function(x){sum(x)})
#check for implict relationship between total sessions and total revenue
cor(row_sums,data_wide$revenue)
qplot(row_sums,data_wide$revenue)+geom_smooth()+theme_bw()+
xlab("Sessions")+ylab("Purchase Total (Dollars)")
#Dummify for tabulation
channels_dummy=data_wide
channels_dummy[,2:8]=data.frame(apply(channels_dummy[,2:8],2,function(x){
pos_inds=which(x>0)
x[pos_inds]=1
x
})
)
#Invert session counts assuming more sessions are better
channels_invert=data_wide
channels_invert[,2:8]=data.frame(apply(channels_invert[,2:8],2,function(x){
pos_inds=which(x>0)
x[pos_inds]=1/x[pos_inds]
x
})
)
#Correlation plot of channel sessions
corrplot(cor(data_wide[,1:8]))
#correlation plot of channel indicators
corrplot(cor(channels_dummy))
#correlation plot of channel indicators
corrplot(cor(channels_invert))
# #Throwing some models at the wall
# x <- as.matrix(channels_dummy[,2:7])
# y<- as.matrix(channels_dummy[,1])
# fit<-glmnet(x,y, family="gaussian", alpha=0.5, lambda=0.001,intercept=FALSE)
# # summarize the fit
# coefficients(fit)
# # make predictions
# predictions <- predict(fit, x, type="link")
# # summarize accuracy
# R2 <- cor((y - predictions))^2
#
all_model_no_interaction=lm(revenue~.+0,data=data_wide)
summary(all_model_no_interaction)
round(coef(all_model_no_interaction)/sum(coef(all_model_no_interaction)),3)
all_model_no_interaction_dummy=lm(revenue~.+0,data=channels_dummy)
summary(all_model_no_interaction_dummy)
round(coef(all_model_no_interaction_dummy)/sum(coef(all_model_no_interaction_dummy)),3)
all_model_no_interaction_invert=lm(revenue~.+0,data=channels_invert)
summary(all_model_no_interaction_invert)
round(coef(all_model_no_interaction_invert)/sum(coef(all_model_no_interaction_invert)),3)
#Continuing using the dummy indicators- now check for interaction
#The front runner
all_model_dummy=lm(revenue~.*.+0,data=channels_dummy)
summary(all_model_dummy)
stepwise_model=step(all_model_dummy,k=log(nrow(channels_dummy)))
summary(stepwise_model)
anova(stepwise_model,all_model_no_interaction_dummy, test="Chi")
round(coef(stepwise_model)[1:7]/sum(coef(stepwise_model)[1:7]),3)
round(coef(stepwise_model)[1:7]/sum(coef(stepwise_model)[1:7]),2)
corrplot(cor(channels_dummy))
data_long=tbl_df(dbGetQuery(con,query))
#ditching some data
data_long$state=NULL
data_long=data_long[-which(data_long$channel=="unknown"),]
data_long=data_long[-which(data_long$channel=="tv"),]
data_long=data_long[-which(data_long$channel=="session continuation"),]
#check channel distribution
data_long %>% group_by(channel) %>%  summarise(count=n()) %>% arrange(desc(count))
#reassign some channel names
disp_inds=grep("display",data_long$channel)
data_long$channel[disp_inds]="display"
email_inds=grep("email",data_long$channel)
data_long$channel[email_inds]="email"
email_inds=grep("paid",data_long$channel)
data_long$channel[email_inds]="paid"
email_inds=grep("organic",data_long$channel)
data_long$channel[email_inds]="organic"
data_long=data_long %>% group_by(order_number,channel) %>%
summarise(revenue=max(revenue),session_count=sum(session_count))
data_long %>% group_by(channel) %>%  summarise(count=n()) %>% arrange(desc(count))
data_long %>% group_by(order_number) %>%  summarise(count=n()) %>% arrange(desc(count))
channel_levels=levels(as.factor(data_long$channel))
resampled_data_frame=data.frame()
for (channel in channel_levels){
ch_inds=which(data_long$channel==channel)
for (i in 1:round(30000/length(ch_inds))){
temp=data_long[ch_inds,]
temp$order_number=paste0(temp$order_number,i)
resampled_data_frame=rbind(resampled_data_frame,temp)
}
}
resampled_data_frame %>% group_by(channel) %>%  summarise(count=n(),revenue=mean(revenue)) %>% arrange(desc(count))
data_wide=resampled_data_frame %>%   spread(key=channel,value=session_count)
names(data_wide) <- sub(" ", ".", names(data_wide))
numeric_inds=sapply(data_wide,is.numeric)
data_wide[,numeric_inds]=apply(data_wide[,numeric_inds],2,function(x){
na_inds=which(is.na(x))
if (length(na_inds)>0){
x[na_inds]=0
} else {
x
}
x
})
data_wide=data_wide %>% group_by(order_number) %>% summarise(revenue=mean(revenue),
affiliates=sum(affiliates),direct=sum(direct),display=sum(display),email=sum(email),
organic=sum(organic),paid=sum(paid),referral=sum(referral))
data_wide$order_number=NULL
View(data_wide)
row_sums=apply(data_wide[,2:8],1,function(x){sum(x)})
summary(row_sums)
sd(row_sums)
qplot(row_sums)
high_inds=which(row_sums> (mean(row_sums)+10*sd(row_sums)))
if (length(high_inds)) data_wide=data_wide[-high_inds,]
summary(data_wide$revenue)
sd(data_wide$revenue)
qplot(data_wide$revenue)
high_inds=which(data_wide$revenue> (mean(data_wide$revenue)+10*sd(data_wide$revenue)))
if (length(high_inds)) data_wide=data_wide[-high_inds,]
row_sums=apply(data_wide[,2:8],1,function(x){sum(x)})
cor(row_sums,data_wide$revenue)
qplot(row_sums,data_wide$revenue)+geom_smooth()+theme_bw()+
xlab("Sessions")+ylab("Purchase Total (Dollars)")
channels_dummy=data_wide
channels_dummy[,2:8]=data.frame(apply(channels_dummy[,2:8],2,function(x){
pos_inds=which(x>0)
x[pos_inds]=1
x
})
)
channels_invert=data_wide
channels_invert[,2:8]=data.frame(apply(channels_invert[,2:8],2,function(x){
pos_inds=which(x>0)
x[pos_inds]=1/x[pos_inds]
x
})
)
corrplot(cor(data_wide[,1:8]))
corrplot(cor(channels_dummy))
corrplot(cor(channels_invert))
corrplot(cor(data_wide[,1:8]))+title("hat")
all_model_no_interaction=lm(revenue~.+0,data=data_wide)
summary(all_model_no_interaction)
round(coef(all_model_no_interaction)/sum(coef(all_model_no_interaction)),3)
all_model_no_interaction_dummy=lm(revenue~.+0,data=channels_dummy)
summary(all_model_no_interaction_dummy)
round(coef(all_model_no_interaction_dummy)/sum(coef(all_model_no_interaction_dummy)),3)
all_model_no_interaction_invert=lm(revenue~.+0,data=channels_invert)
summary(all_model_no_interaction_invert)
round(coef(all_model_no_interaction_invert)/sum(coef(all_model_no_interaction_invert)),3)
all_model_dummy=lm(revenue~.*.+0,data=channels_dummy)
summary(all_model_dummy)
stepwise_model=step(all_model_dummy,k=log(nrow(channels_dummy)))
summary(stepwise_model)
anova(stepwise_model,all_model_no_interaction_dummy, test="Chi")
round(coef(stepwise_model)[1:7]/sum(coef(stepwise_model)[1:7]),2)
round(coef(all_model_no_interaction_dummy)/sum(coef(all_model_no_interaction_dummy)),3)
round(coef(all_model_no_interaction_dummy)/sum(coef(all_model_no_interaction_dummy)),2)
round(coef(stepwise_model)[1:7]/sum(coef(stepwise_model)[1:7]),2)
plot(stepwise_model)
