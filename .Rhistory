library(lubridate)
library(ggplot2)
library(gridExtra)
library(forecast)
library(stats)
library(pander)
library(TTR)
library(googlesheets)
tv_data=tbl_df(read.xlsx("tvanalysis.xlsx",sheet=2,rows=c(1:95),cols=c(1,4:20)))
tv_data$date=as.Date(as.character(tv_data$date),"%m/%d/%Y")+years(2000)
na_inds=which(is.na(tv_data$date))
#not great coding practice here
for (ind in na_inds) {tv_data$date[ind]=tv_data$date[(ind-1)]+weeks(1)}
#Subsetting data
study_vars=c("date","tv.spend")
study_cols=which(names(tv_data) %in% study_vars)
sub_study=tv_data[,study_cols]  %>% arrange(desc(date))
##pulling older daily session data
a=gs_title("channeldata with home")
gs_channeldata=a %>% gs_read(ws = "channeldata")
gs_channeldataroot=a %>% gs_read(ws = "channeldataroot")
channel_home_levels=levels(as.factor(gs_channeldataroot$ga.channelGrouping))
# replacing channel names
for (lev in channel_home_levels) {
swap_inds=which(gs_channeldataroot$ga.channelGrouping==lev)
gs_channeldataroot$ga.channelGrouping[swap_inds]=paste(gs_channeldataroot$ga.channelGrouping[swap_inds],"home",sep=".")
}
gs_channeldataroot[,3]=NULL
channel_sessions_long=rbind(gs_channeldata,gs_channeldataroot)
channel_sessions_long[,4]=NULL
channel_sessions_long=channel_sessions_long %>% rename(date=ga.date)
channel_sessions_long=channel_sessions_long %>% rename(channel=ga.channelGrouping)
channel_sessions_long=channel_sessions_long %>% rename(sessions=ga.sessions)
# channel_sessions_long=tbl_df(read.xlsx("channeldata_with_home.xlsx",sheet=1))
#converting date
channel_sessions_long$date=as.Date(paste(substr(as.character(channel_sessions_long$date),5,6),
substr(as.character(channel_sessions_long$date),7,8),
substr(as.character(channel_sessions_long$date),1,4),
sep="-"), "%m-%d-%Y")
#appending tv spend
channel_sessions_long=rbind(channel_sessions_long,
sub_study %>% select(tv.spend,date) %>%
rename(sessions=tv.spend) %>%
mutate(channel="tv.spend"))
# channel_sessions_long$year=strftime(channel_sessions_long$date,format="%y")
# channel_sessions_long$week=strftime(channel_sessions_long$date,format="%W")
# channel_sessions_long$date=as.Date(strptime(paste(channel_sessions_long$year,
#                                                   (as.numeric(channel_sessions_long$week)*7),
#                                                   sep=" "),format="%Y %j") +years(2000))
#
#Forcing Mondays
channel_sessions_long$weekdays=weekdays(channel_sessions_long$date)
levels(as.factor(channel_sessions_long$weekdays))
tue_inds=which(channel_sessions_long$weekdays=="Tuesday")
channel_sessions_long$date[tue_inds]=channel_sessions_long$date[tue_inds]-days(1)
wed_inds=which(channel_sessions_long$weekdays=="Wednesday")
channel_sessions_long$date[wed_inds]=channel_sessions_long$date[wed_inds]-days(2)
thu_inds=which(channel_sessions_long$weekdays=="Thursday")
channel_sessions_long$date[thu_inds]=channel_sessions_long$date[thu_inds]-days(3)
fri_inds=which(channel_sessions_long$weekdays=="Friday")
channel_sessions_long$date[fri_inds]=channel_sessions_long$date[fri_inds]-days(4)
sat_inds=which(channel_sessions_long$weekdays=="Saturday")
channel_sessions_long$date[sat_inds]=channel_sessions_long$date[sat_inds]-days(5)
sun_inds=which(channel_sessions_long$weekdays=="Sunday")
channel_sessions_long$date[sun_inds]=channel_sessions_long$date[sun_inds]-days(6)
channel_sessions_long=channel_sessions_long %>% group_by(date,channel) %>%
summarise(sessions=sum(sessions))
#casting
channel_sessions_long=channel_sessions_long %>% spread(key=channel,value=sessions)
names(channel_sessions_long) <- sub(" ", ".", names(channel_sessions_long))
#Replacing missing tv spend with 0
channel_sessions_long$tv.spend[which(is.na(channel_sessions_long$tv.spend))]=0
#fabricating variables
channel_sessions_long$direct.net.home=channel_sessions_long$Direct-channel_sessions_long$Direct.home
channel_sessions_long$direct.home=channel_sessions_long$Direct.home
channel_sessions_long$organic.net.home=channel_sessions_long$Organic.Search-channel_sessions_long$Organic.Search.home
channel_sessions_long$organic.home=channel_sessions_long$Organic.Search.home
channel_sessions_long$paid.brand.sessions=channel_sessions_long$`Branded.Paid Search`
study_vars=c("date","tv.spend","direct.net.home","direct.home",
"organic.net.home","organic.home",
"paid.brand.sessions")
study_cols=which(names(channel_sessions_long) %in% study_vars)
channel_sessions_long=channel_sessions_long[,study_cols]  %>% arrange(date)
save(channel_sessions_long,file="channel_sessions_long.rda")
write.csv(channel_sessions_long,file="channel_sessions_long.csv")
gs_upload("channel_sessions_long.csv",sheet_title = "weekly_tv_channel_upload_dont_edit")
---
title: "TV Channel Models"
output: html_document
---
```{r echo=FALSE, message=FALSE, warning=FALSE}
library(tidyr)
library(dplyr)
library(openxlsx)
library(lubridate)
library(ggplot2)
library(gridExtra)
library(forecast)
library(stats)
library(pander)
library(TTR)
library(googlesheets)
source("report_functions.R")
```
```{r echo=FALSE, message=FALSE}
load(file="channel_sessions_long.rda")
freq=52
```
```{r echo=FALSE, message=FALSE, warning=FALSE}
channel_session_gathered=channel_sessions_long %>% gather(key=channel,value=sessions,2:6)
channel_session_gathered$Units="Sessions"
channel_session_gathered$Units[which(channel_session_gathered$channel=="tv.spend")]="Dollars"
ggplot(channel_session_gathered)+theme_bw()+
geom_line(aes(x=date,y=sessions,color=channel))+
facet_grid(Units~.,scales="free")+ylab("")+xlab("Date")+
ggtitle("Weekly TV Spending And Channel Sessions")
```
```{r echo=FALSE, message=FALSE, warning=FALSE}
vars<-c("organic.net.home","organic.home","direct.net.home","direct.home","paid.brand.sessions")
#always sort by descending date first!!
ccf.df=data.frame(Correlation=NULL,Lag=NULL,Source=NULL)
for (var in vars) {
ind=which(names(channel_sessions_long) == var)
study_var=channel_sessions_long[,ind]
na_inds=which(is.na(study_var))
tv=channel_sessions_long$tv.spend[-na_inds]
study_var=na.omit(study_var)
ccf_temp<-ccf(tv,study_var,plot=FALSE)
ccf_temp_df=data.frame(Correlation=ccf_temp$acf,Lag=ccf_temp$lag,Source=rep(var,length(ccf_temp$lag)))
ccf.df<-rbind(ccf.df,ccf_temp_df)
}
CCF_plot<-ggplot(ccf.df %>% filter(Lag>=0),aes(x=Lag,y=Correlation,color=Source))+ theme_bw()+
geom_point()+ggtitle("TV Spending Delayed Effect")+xlab("Lag (Weeks)")+
scale_color_manual( values=rainbow(length(vars)),
name="Source",
breaks=vars,
labels=vars)
CCF_plot
```
## Organic Net Home Channel
```{r echo=FALSE, message=FALSE}
study_var=channel_sessions_long$organic.net.home
na_inds=which(is.na(study_var))
tv=channel_sessions_long$tv.spend[-na_inds]
study_var=na.omit(study_var)
date=channel_sessions_long$date[-na_inds]
title_paste="Organic Net Home"
```
###2nd order polynomial fit
```{r echo=FALSE, message=FALSE}
#frequency shoud be freq (weeks per year), but we don't have two full periods
poly_fit=report_poly_fit_2(study_var,tv)
report_poly_fit_2_sub(poly_fit,study_var)
```
###Stepwise polynomial fit
```{r echo=FALSE, message=FALSE, results="hide"}
stepwise_model=step_model(study_var,tv)
```
```{r echo=FALSE, message=FALSE}
step_pander(stepwise_model)
```
```{r echo=FALSE, message=FALSE, warning=FALSE}
poly_plots(tv,study_var,poly_fit,stepwise_model)
```
###Trend Decomposition
```{r echo=FALSE, message=FALSE, warning=FALSE, results="hide"}
stl_func(study_var,freq)
```
###ARIMAX model with TV spend
```{r echo=FALSE, message=FALSE, warning=FALSE}
tv_arima=arima_func(stepwise_model,study_var,tv,freq)
arima_func_sub(tv_arima,stepwise_model,study_var,tv,freq)
```
```{r echo=FALSE, message=FALSE}
# model_comp_plots(stepwise_model,tv_arima)
transformed_plot(tv_arima,tv)
```
###Forecasts
```{r echo=FALSE, message=FALSE, warning=FALSE}
channel_sessions_long=add_forecast_to_df(channel_sessions_long,tv_arima,study_var)
channel_sessions_long=channel_sessions_long %>% rename(organic.net.home.forecast=forecast)
# plot(channel_sessions_long$organic.net.home.forecast)
# lines(study_var)
```
###Model Validation
```{r echo=FALSE, message=FALSE, warning=FALSE}
model_validation(tv_arima,study_var,tv,freq,date)
```
## Organic Home Channel
```{r echo=FALSE, message=FALSE}
study_var=channel_sessions_long$organic.home
na_inds=which(is.na(study_var))
tv=channel_sessions_long$tv.spend[-na_inds]
study_var=na.omit(study_var)
date=channel_sessions_long$date[-na_inds]
title_paste="Organic Home"
```
###2nd order polynomial fit
```{r echo=FALSE, message=FALSE}
#frequency shoud be freq (weeks per year), but we don't have two full periods
poly_fit=report_poly_fit_2(study_var,tv)
report_poly_fit_2_sub(poly_fit,study_var)
```
###Stepwise polynomial fit
```{r echo=FALSE, message=FALSE, results="hide"}
stepwise_model=step_model(study_var,tv)
```
```{r echo=FALSE, message=FALSE}
step_pander(stepwise_model)
```
```{r echo=FALSE, message=FALSE, warning=FALSE}
poly_plots(tv,study_var,poly_fit,stepwise_model)
```
###Trend Decomposition
```{r echo=FALSE, message=FALSE, warning=FALSE, results="hide"}
stl_func(study_var,freq)
```
###ARIMAX model with TV spend
```{r echo=FALSE, message=FALSE, warning=FALSE}
tv_arima=arima_func(stepwise_model,study_var,tv,freq)
arima_func_sub(tv_arima,stepwise_model,study_var,tv,freq)
```
```{r echo=FALSE, message=FALSE}
# model_comp_plots(stepwise_model,tv_arima)
transformed_plot(tv_arima,tv)
```
###Forecasts
```{r echo=FALSE, message=FALSE, warning=FALSE}
channel_sessions_long=add_forecast_to_df(channel_sessions_long,tv_arima,study_var)
channel_sessions_long=channel_sessions_long %>% rename(organic.home.forecast=forecast)
# plot(channel_sessions_long$organic.net.home.forecast)
# lines(study_var)
```
###Model Validation
```{r echo=FALSE, message=FALSE, warning=FALSE}
model_validation(tv_arima,study_var,tv,freq,date)
```
## Direct Net Home Channel
```{r echo=FALSE, message=FALSE}
study_var=channel_sessions_long$direct.net.home
na_inds=which(is.na(study_var))
tv=channel_sessions_long$tv.spend[-na_inds]
study_var=na.omit(study_var)
date=channel_sessions_long$date[-na_inds]
title_paste="Direct Net Home"
```
###2nd order polynomial fit
```{r echo=FALSE, message=FALSE}
#frequency shoud be freq (weeks per year), but we don't have two full periods
poly_fit=report_poly_fit_2(study_var,tv)
report_poly_fit_2_sub(poly_fit,study_var)
```
###Stepwise polynomial fit
```{r echo=FALSE, message=FALSE, results="hide"}
stepwise_model=step_model(study_var,tv)
```
```{r echo=FALSE, message=FALSE}
step_pander(stepwise_model)
```
```{r echo=FALSE, message=FALSE, warning=FALSE}
poly_plots(tv,study_var,poly_fit,stepwise_model)
```
###Trend Decomposition
```{r echo=FALSE, message=FALSE, warning=FALSE, results="hide"}
stl_func(study_var,freq)
```
###ARIMAX model with TV spend
```{r echo=FALSE, message=FALSE, warning=FALSE}
tv_arima=arima_func(stepwise_model,study_var,tv,freq)
arima_func_sub(tv_arima,stepwise_model,study_var,tv,freq)
```
```{r echo=FALSE, message=FALSE}
# model_comp_plots(stepwise_model,tv_arima)
transformed_plot(tv_arima,tv)
```
###Forecasts
```{r echo=FALSE, message=FALSE, warning=FALSE}
channel_sessions_long=add_forecast_to_df(channel_sessions_long,tv_arima,study_var)
channel_sessions_long=channel_sessions_long %>% rename(direct.net.home.forecast=forecast)
# plot(channel_sessions_long$organic.net.home.forecast)
# lines(study_var)
```
###Model Validation
```{r echo=FALSE, message=FALSE, warning=FALSE}
model_validation(tv_arima,study_var,tv,freq,date)
```
## Direct Home Channel
```{r echo=FALSE, message=FALSE}
study_var=channel_sessions_long$direct.home
na_inds=which(is.na(study_var))
tv=channel_sessions_long$tv.spend[-na_inds]
study_var=na.omit(study_var)
date=channel_sessions_long$date[-na_inds]
title_paste="Direct Home"
```
###2nd order polynomial fit
```{r echo=FALSE, message=FALSE}
#frequency shoud be freq (weeks per year), but we don't have two full periods
poly_fit=report_poly_fit_2(study_var,tv)
report_poly_fit_2_sub(poly_fit,study_var)
```
###Stepwise polynomial fit
```{r echo=FALSE, message=FALSE, results="hide"}
stepwise_model=step_model(study_var,tv)
```
```{r echo=FALSE, message=FALSE}
step_pander(stepwise_model)
```
```{r echo=FALSE, message=FALSE, warning=FALSE}
poly_plots(tv,study_var,poly_fit,stepwise_model)
```
###Trend Decomposition
```{r echo=FALSE, message=FALSE, warning=FALSE, results="hide"}
stl_func(study_var,freq)
```
###ARIMAX model with TV spend
```{r echo=FALSE, message=FALSE, warning=FALSE}
tv_arima=arima_func(stepwise_model,study_var,tv,freq)
arima_func_sub(tv_arima,stepwise_model,study_var,tv,freq)
```
```{r echo=FALSE, message=FALSE}
# model_comp_plots(stepwise_model,tv_arima)
transformed_plot(tv_arima,tv)
```
###Forecasts
```{r echo=FALSE, message=FALSE, warning=FALSE}
channel_sessions_long=add_forecast_to_df(channel_sessions_long,tv_arima,study_var)
channel_sessions_long=channel_sessions_long %>% rename(direct.home.forecast=forecast)
# plot(channel_sessions_long$organic.net.home.forecast)
# lines(study_var)
```
###Model Validation
```{r echo=FALSE, message=FALSE, warning=FALSE}
model_validation(tv_arima,study_var,tv,freq,date)
```
## Paid Brand Channel
```{r echo=FALSE, message=FALSE}
study_var=channel_sessions_long$paid.brand.sessions
na_inds=which(is.na(study_var))
tv=channel_sessions_long$tv.spend[-na_inds]
study_var=na.omit(study_var)
date=channel_sessions_long$date[-na_inds]
title_paste="Paid Brand"
```
###2nd order polynomial fit
```{r echo=FALSE, message=FALSE}
#frequency shoud be freq (weeks per year), but we don't have two full periods
poly_fit=report_poly_fit_2(study_var,tv)
report_poly_fit_2_sub(poly_fit,study_var)
```
###Stepwise polynomial fit
```{r echo=FALSE, message=FALSE, results="hide"}
stepwise_model=step_model(study_var,tv)
```
```{r echo=FALSE, message=FALSE}
step_pander(stepwise_model)
```
```{r echo=FALSE, message=FALSE, warning=FALSE}
poly_plots(tv,study_var,poly_fit,stepwise_model)
```
###Trend Decomposition
```{r echo=FALSE, message=FALSE, warning=FALSE, results="hide"}
stl_func(study_var,freq)
```
###ARIMAX model with TV spend
```{r echo=FALSE, message=FALSE, warning=FALSE}
tv_arima=arima_func(stepwise_model,study_var,tv,freq)
arima_func_sub(tv_arima,stepwise_model,study_var,tv,freq)
```
```{r echo=FALSE, message=FALSE}
# model_comp_plots(stepwise_model,tv_arima)
transformed_plot(tv_arima,tv)
```
###Forecasts
```{r echo=FALSE, message=FALSE, warning=FALSE}
channel_sessions_long=add_forecast_to_df(channel_sessions_long,tv_arima,study_var)
channel_sessions_long=channel_sessions_long %>% rename(paid.brand.sessions.forecast=forecast)
# plot(channel_sessions_long$organic.net.home.forecast)
# lines(study_var)
```
###Model Validation
There are not enough data points to perform model validation for this channel
```{r echo=FALSE, message=FALSE, warning=FALSE}
# model_validation(tv_arima,study_var,tv,freq,date)
```
```{r echo=FALSE, message=FALSE, warning=FALSE}
# write.csv(channel_sessions_long,file="channel_sessions_long_with_forecasts.csv")
# gs_upload("channel_sessions_long_with_forecasts.csv",sheet_title = "weekly_tv_channel_with_forecasts_upload_dont_edit")
```
write.csv(channel_sessions_long,file="channel_sessions_long_with_forecasts.csv")
gs_upload("channel_sessions_long_with_forecasts.csv",sheet_title = "weekly_tv_channel_with_forecasts_upload_dont_edit")
library(readr)
library(tidyr)
library(dplyr)
library(openxlsx)
library(lubridate)
library(ggplot2)
library(gridExtra)
library(forecast)
library(stats)
library(pander)
library(TTR)
library(googlesheets)
tv_data=tbl_df(read.xlsx("tvanalysis.xlsx",sheet=2,rows=c(1:95),cols=c(1,4:20)))
tv_data$date=as.Date(as.character(tv_data$date),"%m/%d/%Y")+years(2000)
na_inds=which(is.na(tv_data$date))
#not great coding practice here
for (ind in na_inds) {tv_data$date[ind]=tv_data$date[(ind-1)]+weeks(1)}
study_vars=c("date","tv.spend")
study_cols=which(names(tv_data) %in% study_vars)
sub_study=tv_data[,study_cols]  %>% arrange(desc(date))
GMV_data=tbl_df(read_csv("daily_orders_rev_gmv.csv"))
GMV_data$date=as.Date(GMV_data$Date,"%m/%d/%Y")
GMV_data=GMV_data %>% select(date,Revenue)
GMV_data$channel="GMV"
GMV_study=rbind(GMV_data,
sub_study %>% select(tv.spend,date) %>%
rename(Revenue=tv.spend) %>%
mutate(channel="tv.spend")) %>% arrange(date)
channel_sessions_long$weekdays=weekdays(channel_sessions_long$date)
levels(as.factor(channel_sessions_long$weekdays))
GMV_study$weekdays=weekdays(GMV_study$date)
levels(as.factor(GMV_study$weekdays))
tue_inds=which(GMV_study$weekdays=="Tuesday")
GMV_study$date[tue_inds]=GMV_study$date[tue_inds]-days(1)
wed_inds=which(GMV_study$weekdays=="Wednesday")
GMV_study$date[wed_inds]=GMV_study$date[wed_inds]-days(2)
thu_inds=which(GMV_study$weekdays=="Thursday")
GMV_study$date[thu_inds]=GMV_study$date[thu_inds]-days(3)
fri_inds=which(GMV_study$weekdays=="Friday")
GMV_study$date[fri_inds]=GMV_study$date[fri_inds]-days(4)
sat_inds=which(GMV_study$weekdays=="Saturday")
GMV_study$date[sat_inds]=GMV_study$date[sat_inds]-days(5)
sun_inds=which(GMV_study$weekdays=="Sunday")
GMV_study$date[sun_inds]=channel_sessions_long$date[sun_inds]-days(6)
GMV_study$weekdays=weekdays(GMV_study$date)
levels(as.factor(GMV_study$weekdays))
tue_inds=which(GMV_study$weekdays=="Tuesday")
GMV_study$date[tue_inds]=GMV_study$date[tue_inds]-days(1)
GMV_study$weekdays=weekdays(GMV_study$date)
levels(as.factor(GMV_study$weekdays))
GMV_study=rbind(GMV_data,
sub_study %>% select(tv.spend,date) %>%
rename(Revenue=tv.spend) %>%
mutate(channel="tv.spend")) %>% arrange(date)
#Forcing Mondays
GMV_study$weekdays=weekdays(GMV_study$date)
levels(as.factor(GMV_study$weekdays))
tue_inds=which(GMV_study$weekdays=="Tuesday")
GMV_study$date[tue_inds]=GMV_study$date[tue_inds]-days(1)
wed_inds=which(GMV_study$weekdays=="Wednesday")
GMV_study$date[wed_inds]=GMV_study$date[wed_inds]-days(2)
thu_inds=which(GMV_study$weekdays=="Thursday")
GMV_study$date[thu_inds]=GMV_study$date[thu_inds]-days(3)
fri_inds=which(GMV_study$weekdays=="Friday")
GMV_study$date[fri_inds]=GMV_study$date[fri_inds]-days(4)
sat_inds=which(GMV_study$weekdays=="Saturday")
GMV_study$date[sat_inds]=GMV_study$date[sat_inds]-days(5)
sun_inds=which(GMV_study$weekdays=="Sunday")
GMV_study$date[sun_inds]=GMV_study$date[sun_inds]-days(6)
GMV_study$weekdays=weekdays(GMV_study$date)
levels(as.factor(GMV_study$weekdays))
GMV_study=GMV_study %>% group_by(channel,date) %>%   summarise(Revenue=sum(Revenue))
GMV_study
GMV_study=GMV_study %>% spread(key=channel,value=Revenue)
GMV_study$tv.spend[which(is.na(GMV_study$tv.spend))]=0
GMV_study=GMV_study %>% na.omit()
GMV_study
TV_lit_date=min(GMV_study$date[which(GMV_study$tv.spend>0)])
TV_end_date=max(GMV_study$date[which(GMV_study$tv.spend>0)])
TV_lit_date
TV_end_date
GMV_study=GMV_study %>% filter(date>=TV_lit_date) %>% arrange(desc(date))
ccf_temp=ccf(GMV_study$tv.spend,GMV_study$GMV,plot=FALSE)
ccf_df=tbl_df(data.frame(Correlation=ccf_temp$acf,Lag=ccf_temp$lag))
ggplot(ccf_df %>% filter(Lag>=0),aes(x=Lag,y=Correlation))+ theme_bw()+
geom_point()+ggtitle(paste("TV Spend Delayed Effect On GMV",TV_lit_date,"to",TV_end_date))+xlab("Lag (Weeks)")
source("report_functions.R")
load(file="channel_sessions_long.rda")
freq=52
View(channel_sessions_long)
channel_session_gathered$tv.spend[,90:nrow(channel_session_gathered)]=0
channel_sessions_long.rda$tv.spend[,90:nrow(channel_sessions_long.rda)]=0
channel_sessions_long$tv.spend[,90:nrow(channel_sessions_long)]=0
channel_sessions_long$tv.spend[90:nrow(channel_sessions_long)]=0
channel_session_gathered=channel_sessions_long %>% gather(key=channel,value=sessions,2:6)
channel_session_gathered$Units="Sessions"
channel_session_gathered$Units[which(channel_session_gathered$channel=="tv.spend")]="Dollars"
ggplot(channel_session_gathered)+theme_bw()+
geom_line(aes(x=date,y=sessions,color=channel))+
facet_grid(Units~.,scales="free")+ylab("")+xlab("Date")+
ggtitle("Weekly TV Spending And Channel Sessions")
vars<-c("organic.net.home","organic.home","direct.net.home","direct.home","paid.brand.sessions")
#always sort by descending date first!!
ccf.df=data.frame(Correlation=NULL,Lag=NULL,Source=NULL)
for (var in vars) {
ind=which(names(channel_sessions_long) == var)
study_var=channel_sessions_long[,ind]
na_inds=which(is.na(study_var))
tv=channel_sessions_long$tv.spend[-na_inds]
study_var=na.omit(study_var)
ccf_temp<-ccf(tv,study_var,plot=FALSE)
ccf_temp_df=data.frame(Correlation=ccf_temp$acf,Lag=ccf_temp$lag,Source=rep(var,length(ccf_temp$lag)))
ccf.df<-rbind(ccf.df,ccf_temp_df)
}
CCF_plot<-ggplot(ccf.df %>% filter(Lag>=0),aes(x=Lag,y=Correlation,color=Source))+ theme_bw()+
geom_point()+ggtitle("TV Spending Delayed Effect")+xlab("Lag (Weeks)")+
scale_color_manual( values=rainbow(length(vars)),
name="Source",
breaks=vars,
labels=vars)
CCF_plot
