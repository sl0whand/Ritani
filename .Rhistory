load(file="channel_sessions_long.rda")
freq=52
#Pretending Comcast never happened
# comcast_switch_date="2015-05-04"
# adap_switch_date="2015-09-14"
# comcast_ind=which(channel_sessions_long$date>comcast_switch_date & channel_sessions_long$date<adap_switch_date)
# channel_sessions_long$tv.spend[comcast_ind]=0
#Train only through September
# train_end_date="2015-10-01"
# train_end_ind=which(channel_sessions_long$date>=train_end_date)
#
# channel_sessions_long$direct.net.home[train_end_ind]=NA
# channel_sessions_long$direct.home[train_end_ind]=NA
# channel_sessions_long$organic.net.home[train_end_ind]=NA
# channel_sessions_long$organic.home[train_end_ind]=NA
# channel_sessions_long$paid.brand[train_end_ind]=NA
## Organic Net Home Channel
var_name="organic.net.home"
study_var=channel_sessions_long[,which(names(channel_sessions_long)==var_name)][[1]]
na_inds=which(is.na(study_var))
tv=channel_sessions_long$tv.spend[-na_inds]
study_var=na.omit(study_var)
date=channel_sessions_long$date[-na_inds]
title_paste="Organic Net of Home"
###ARIMAX model with TV spend
tv_arima=arima_func(stepwise_model,study_var,tv,freq)
ts_var=ts(tv, frequency = freq)
stl_obj=try(stl(ts_var, s.window="periodic",robust=TRUE))
if (class(stl_obj)=="try-error") {
ts_var=tv
}
ts_var
xreg_matrix<-model.matrix(tv~study_var+I(study_var^.5))
xreg_matrix=xreg_matrix[,-1]
xreg_matrix
View(channel_sessions_long)
i=length(study_var)-10
i
order=arimaorder(tv_arima)
i=length(study_var)-10
xshort <-ts_var[1:(k+(i-1))]
xnext <- ts_var[(k+i):(k+(i-1)+pred_hor)]
xreg_matrix_short=xreg_matrix[1:(k+(i-1)),]
xreg_matrix_next=xreg_matrix[(k+i):(k+(i-1)+pred_hor),]
i=10
xshort <-ts_var[1:(k+(i-1))]
xnext <- ts_var[(k+i):(k+(i-1)+pred_hor)]
xreg_matrix_short=xreg_matrix[1:(k+(i-1)),]
xreg_matrix_next=xreg_matrix[(k+i):(k+(i-1)+pred_hor),]
order=arimaorder(tv_arima)
fit2 <- Arima(xshort, order=order[1:3], seasonal=order[4:6],xreg=xreg_matrix_short)
fit2
fcast2 <- forecast(fit2,xreg=xreg_matrix_next)
fcast_pred=fcast2[['mean']]
fcast_pred
k
k=length(study_var)
xshort <-ts_var[1:(k+(i-1))]
xshort
xshort <-ts_var[1:(k-i)]
xnext <- ts_var[(k-i+1):k]
xshort
xnext
xreg_matrix_short=xreg_matrix[1:(k-i),]
xreg_matrix_next=xreg_matrix[(k-i+1):k,]
xreg_matrix_short
xreg_matrix_next
order=arimaorder(tv_arima)
order
fit2 <- Arima(xshort, order=order[1:3], seasonal=order[4:6],xreg=xreg_matrix_short)
order[4:6]
fit2
tv_arima
fcast2 <- forecast(fit2,xreg=xreg_matrix_next)
fcast_pred=fcast2[['mean']]
as.vector(fitted(tv_arima))[1:(k-i)]
as.vector(fitted(tv_arima))[(k-2*i):(k-i)]
fcast_pred
c(as.vector(fitted(tv_arima))[(k-2*i):(k-i)],as.vector(fcast_pred))
length(tv_plot)
tv_plot=tv[(k-2*i):k]
length(tv_plot)
length(c(as.vector(fitted(tv_arima))[(k-2*i):(k-i)],as.vector(fcast_pred)))
plot_date=date[(k-2*i):k]
plot_date
tv_fit_plot=c(as.vector(fitted(tv_arima))[(k-2*i):(k-i)],as.vector(fcast_pred))
temp_df=data.frame(tv_plot,tv_fit_plot,plot_date)
temp_df
data_long=dbGetQuery(con,query)
source("Ritani_log_analysis_DB_connection.R")
query=paste("SELECT order_number, name AS channel, vendor, state,
max(total) AS total, sum(vendor_views) AS session_count
FROM (
SELECT channel_id, clickstream_id, session_id
FROM channel_touchpoints
) ct INNER JOIN (
SELECT id, name, has_attributed_revenue
FROM channels
WHERE has_attributed_revenue=1
) ch ON ct.channel_id=ch.id
INNER JOIN (
SELECT id, pre_purchase
FROM sessions
WHERE pre_purchase=1
) se ON ct.session_id=se.id
INNER JOIN (
SELECT id, order_number, total, state
FROM clickstreams
) cl ON ct.clickstream_id=cl.id
INNER JOIN (
SELECT clickstream_id, vendor, count(*) AS vendor_views
FROM display_impressions
GROUP BY clickstream_id, vendor
) di ON ct.clickstream_id=di.clickstream_id
GROUP BY order_number, channel, vendor
HAVING state LIKE '%shipped%' OR state LIKE '%accepted%' OR state LIKE '%delivered%'
OR state LIKE '%store%' OR state LIKE '%charged%' OR state LIKE '%authorized%'
OR state LIKE '%shipped%'")
data_long=dbGetQuery(con,query)
View(data_long)
View(data_long)
library(tidyr)
library(dplyr)
data_long=tbl_df(dbGetQuery(con,query))
data_long
?"gather"
data_wide=data_long %>% select(order_number,channel,vendor,total,session_count) %>%
gather(key=c(channel,vendor),value=c(total,session_count))
data_wide=data_long %>% select(order_number,channel,vendor,total,session_count) %>%
separate(key=c(channel,vendor),value=c(total,session_count))
?separate
data_wide=data_long %>% select(order_number,channel,vendor,total,session_count) %>%
spread(key=c(channel,vendor),value=c(total,session_count))
?spread
data_wide=data_long %>% select(order_number,channel,vendor,total,session_count)
View(data_wide)
data_wide=data_long %>% select(order_number,channel,vendor,total,session_count) %>%
spread(key=c(channel,vendor),value=session_count)
?spread
data_wide=data_long %>% select(order_number,channel,vendor,total,session_count) %>%
spread(key=channel,value=session_count)
View(data_wide)
data_wide=data_wide %>% select(order_number,channel,vendor,total,session_count) %>%
spread(key=vendor,value=session_count)
View(data_wide)
data_wide=data_wide %>% mutate(dummy=1)
data_wide=data_wide %>% select(order_number,channel,vendor,total,session_count) %>%
spread(key=vendor,value=dummy)
data_wide=data_wide %>%   spread(key=vendor,value=dummy)
View(data_wide)
data_long=tbl_df(dbGetQuery(con,query))
data_long
levels(data_long$channel)
levels(as.factor(data_long$channel))
levels(as.factor(data_long$vendor))
query=paste("
SELECT order_number, name AS channel, vendor, state,
max(total) AS revenue, sum(vendor_views) AS session_count
FROM (
SELECT channel_id, clickstream_id, session_id
FROM channel_touchpoints
) ct INNER JOIN (
SELECT id, name, has_attributed_revenue
FROM channels
WHERE has_attributed_revenue=1
) ch ON ct.channel_id=ch.id
INNER JOIN (
SELECT id, pre_purchase
FROM sessions
WHERE pre_purchase=1
) se ON ct.session_id=se.id
INNER JOIN (
--     revenue
SELECT id, order_number, total, state
FROM clickstreams
) cl ON ct.clickstream_id=cl.id
INNER JOIN (
--    ad vendor information
SELECT clickstream_id, vendor, count(*) AS vendor_views
FROM display_impressions
GROUP BY clickstream_id, vendor
HAVING vendor IN (
SELECT vendor
FROM (
SELECT vendor, count(*) AS count
FROM display_impressions
GROUP BY  vendor
HAVING count>150
ORDER BY count DESC
) dm
)
) di ON ct.clickstream_id=di.clickstream_id
GROUP BY order_number, channel, vendor
HAVING state LIKE '%shipped%' OR state LIKE '%accepted%' OR state LIKE '%delivered%'
OR state LIKE '%store%' OR state LIKE '%charged%' OR state LIKE '%authorized%'
OR state LIKE '%shipped%'
")
data_long=tbl_df(dbGetQuery(con,query))
levels(as.factor(data_long$channel))
levels(as.factor(data_long$vendor))
data_wide=data_long %>% select(order_number,channel,vendor,revenue,session_count) %>%
spread(key=channel,value=session_count)
data_wide
data_wide=data_wide %>% mutate(dummy=1)
data_wide=data_wide %>%   spread(key=vendor,value=dummy)
View(data_wide)
data_long=tbl_df(dbGetQuery(con,query))
levels(as.factor(data_long$channel))
levels(as.factor(data_long$vendor))
data_wide=data_long %>% select(order_number,channel,vendor,revenue,session_count) %>%
spread(key=channel,value=session_count)
View(data_wide)
data_wide=data_long %>% select(order_number,channel,vendor,revenue,session_count) %>%
spread(key=vendor,value=session_count)
View(data_wide)
data_wide=data_wide %>% mutate(dummy=1)
data_wide=data_wide %>%   spread(key=channel,value=dummy)
View(data_wide)
query=paste("
SELECT order_number, name AS channel, vendor, state,
max(total) AS revenue, sum(vendor_views) AS session_count
FROM (
SELECT channel_id, clickstream_id, session_id
FROM channel_touchpoints
) ct INNER JOIN (
SELECT id, name, has_attributed_revenue
FROM channels
WHERE has_attributed_revenue=1
) ch ON ct.channel_id=ch.id
INNER JOIN (
SELECT id, pre_purchase
FROM sessions
WHERE pre_purchase=1
) se ON ct.session_id=se.id
INNER JOIN (
SELECT id, order_number, total, state
FROM clickstreams
) cl ON ct.clickstream_id=cl.id
INNER JOIN (
SELECT clickstream_id, vendor, count(*) AS vendor_views
FROM display_impressions
GROUP BY clickstream_id, vendor
HAVING vendor IN (
SELECT vendor
FROM (
SELECT vendor, count(*) AS count
FROM display_impressions
GROUP BY  vendor
HAVING count>150
ORDER BY count DESC
) dm
)
) di ON ct.clickstream_id=di.clickstream_id
GROUP BY order_number, channel, vendor
HAVING state LIKE '%shipped%' OR state LIKE '%accepted%' OR state LIKE '%delivered%'
OR state LIKE '%store%' OR state LIKE '%charged%' OR state LIKE '%authorized%'
OR state LIKE '%shipped%'
")
data_long=tbl_df(dbGetQuery(con,query))
levels(as.factor(data_long$channel))
levels(as.factor(data_long$vendor))
data_wide=data_long %>% select(order_number,channel,vendor,revenue,session_count) %>%
spread(key=vendor,value=session_count)
data_wide=data_wide %>% mutate(dummy=1)
data_wide=data_wide %>%   spread(key=channel,value=dummy)
View(data_wide)
View(data_long)
data_wide=data_long %>% select(order_number,channel,vendor,revenue,session_count) %>%
spread(key=vendor,value=session_count)
View(data_wide)
?apply
data_wide$dummy=apply(data_wide[,4:10],1,max(x))
data_wide$dummy=apply(data_wide[,4:10],1,function{max(x)})
data_wide$dummy=apply(data_wide[,4:10],1,max)
View(data_wide)
?max
data_wide$dummy=apply(data_wide[,4:10],1,max(, na.rm=TRUE))
data_wide$dummy=apply(data_wide[,4:10],1,max(x,na.rm=TRUE))
data_wide$dummy=apply(data_wide[,4:10],1,function(x) max(x,na.rm=TRUE))
View(data_wide)
data_wide=data_wide %>%   spread(key=channel,value=dummy)
View(data_wide)
names(data_wide) <- sub(",", ".", names(data_wide))
View(data_wide)
names(data_wide)
names(data_wide) <- sub(",", ".", names(data_wide))
names(data_wide) <- sub(" ", ".", names(data_wide))
names(data_wide)
names(data_wide) <- sub("..", ".", names(data_wide))
names(data_wide)
data_wide=data_long %>% select(order_number,channel,vendor,revenue,session_count) %>%
spread(key=vendor,value=session_count)
data_wide$dummy=apply(data_wide[,4:10],1,function(x) max(x,na.rm=TRUE))
data_wide=data_wide %>%   spread(key=channel,value=dummy)
names(data_wide) <- sub(",", ".", names(data_wide))
names(data_wide) <- sub(" ", ".", names(data_wide))
View(data_wide)
numeric_inds=sapply(data_wide,is.numeric)
numeric_inds
data_wide[,numeric_inds]=apply(data_wide[,numeric_inds],2,function(x){
na_inds=is.na(x)
x[na_inds]=0
})
View(data_wide)
data_wide=data_long %>% select(order_number,channel,vendor,revenue,session_count) %>%
spread(key=vendor,value=session_count)
# using max vendor sessions per channel as channel session count
data_wide$dummy=apply(data_wide[,4:10],1,function(x) max(x,na.rm=TRUE))
data_wide=data_wide %>%   spread(key=channel,value=dummy)
#fix column names
names(data_wide) <- sub(",", ".", names(data_wide))
names(data_wide) <- sub(" ", ".", names(data_wide))
#setting all missings to 0
numeric_inds=sapply(data_wide,is.numeric)
data_wide[,numeric_inds]=apply(data_wide[,numeric_inds],2,function(x){
na_inds=which(is.na(x))
x[na_inds]=0
})
View(data_wide)
data_long=tbl_df(dbGetQuery(con,query))
levels(as.factor(data_long$channel))
levels(as.factor(data_long$vendor))
# putting data in wide form
data_wide=data_long %>% select(order_number,channel,vendor,revenue,session_count) %>%
spread(key=vendor,value=session_count)
# using max vendor sessions per channel as channel session count
data_wide$dummy=apply(data_wide[,4:10],1,function(x) max(x,na.rm=TRUE))
data_wide=data_wide %>%   spread(key=channel,value=dummy)
#fix column names
names(data_wide) <- sub(",", ".", names(data_wide))
names(data_wide) <- sub(" ", ".", names(data_wide))
#setting all missings to 0
numeric_inds=sapply(data_wide,is.numeric)
data_wide[,numeric_inds]
x=date_wide$adroll
x=data_wide$adroll
na_inds=which(is.na(x))
na_inds
na_inds=which(is.na(x))
x[na_inds]=0
x
data_wide[,numeric_inds]
x=data_wide$revenue
na_inds=which(is.na(x))
na_inds
length(na_inds)
data_wide[,numeric_inds]=apply(data_wide[,numeric_inds],2,function(x){
na_inds=which(is.na(x))
if (length(na_inds)>0){
x[na_inds]=0
} else {
x
}
)
data_wide[,numeric_inds]=apply(data_wide[,numeric_inds],2,function(x){
na_inds=which(is.na(x))
if (length(na_inds)>0){
x[na_inds]=0
} else {
x
}
)
data_wide[,numeric_inds]=apply(data_wide[,numeric_inds],2,function(x){
na_inds=which(is.na(x))
if (length(na_inds)>0){
x[na_inds]=0
} else {
x
}
})
View(data_wide)
data_wide=data_long %>% select(order_number,channel,vendor,revenue,session_count) %>%
spread(key=vendor,value=session_count)
# using max vendor sessions per channel as channel session count
data_wide$dummy=apply(data_wide[,4:10],1,function(x) max(x,na.rm=TRUE))
data_wide=data_wide %>%   spread(key=channel,value=dummy)
#fix column names
names(data_wide) <- sub(",", ".", names(data_wide))
names(data_wide) <- sub(" ", ".", names(data_wide))
#setting all missings to 0
numeric_inds=sapply(data_wide,is.numeric)
data_wide[,numeric_inds]
x=data_wide$adroll
na_inds=which(is.na(x))
length(na_inds)
test=apply(data_wide[,numeric_inds],2,function(x){
na_inds=which(is.na(x))
if (length(na_inds)>0){
x[na_inds]=0
} else {
x
}
x
})
View(test)
data_wide[,numeric_inds]=apply(data_wide[,numeric_inds],2,function(x){
na_inds=which(is.na(x))
if (length(na_inds)>0){
x[na_inds]=0
} else {
x
}
x
})
View(data_wide)
?summarise_each
test=data_wide %>% group_by(order_number) %>% summarise(revenue=mean(revenue))
test
test=data_wide %>% group_by(order_number) %>% summarise(revenue=mean(revenue)) %>%
summarise_each(funs(sum))
names(data_wide)
test=data_wide %>% group_by(order_number) %>% summarise(revenue=mean(revenue)) %>%
summarise_each(funs(sum),names(data_wide)[3:10])
test=data_wide %>% group_by(order_number) %>% summarise(revenue=mean(revenue)) %>%
summarise_each(funs(sum))
names(data_wide)[3:10]
names(data_wide)[3:18]
test=data_wide %>% group_by(order_number) %>% summarise(revenue=mean(revenue)) %>%
summarise_each(funs(sum),names(data_wide)[3:18])
test=data_wide %>% group_by(order_number) %>% summarise(revenue=mean(revenue)) %>%
summarise_each(funs(sum),3:18)
test=data_wide %>% group_by(order_number) %>% summarise(revenue=mean(revenue),adroll=sum(adroll),
criteo=sum(criteo))
View(test)
test=data_wide %>% group_by(order_number) %>% summarise(revenue=mean(revenue),adroll=sum(adroll),
criteo=sum(criteo),mbuy=sum(mbuy),mforge=sum(mforge),quantcast=sum(quantcast),
sgrid=sum(sgrid),turn=sum(turn),affiliates=sum(affiliates),
display.prospecting=sum(display..prospecting),display.retargeting=sum(display..retargeting),
email.inbound=sum(email..inbound),email.outbound=sum(email..outbound),
organic.search=sum(organic.search),paid.search=sum(paid.search),
referral=sum(referral),tv=sum(tv))
View(data_wide)
View(test)
library(corrplot)
install.packages("corrplot")
data_wide=data_wide %>% group_by(order_number) %>% summarise(revenue=mean(revenue),adroll=sum(adroll),
criteo=sum(criteo),mbuy=sum(mbuy),mforge=sum(mforge),quantcast=sum(quantcast),
sgrid=sum(sgrid),turn=sum(turn),affiliates=sum(affiliates),
display.prospecting=sum(display..prospecting),display.retargeting=sum(display..retargeting),
email.inbound=sum(email..inbound),email.outbound=sum(email..outbound),
organic.search=sum(organic.search),paid.search=sum(paid.search),
referral=sum(referral),tv=sum(tv))
#Correlation plot
corrplot(cor(data_wide[,numeric_inds]))
library(corrplot)
data_wide=data_wide %>% group_by(order_number) %>% summarise(revenue=mean(revenue),adroll=sum(adroll),
criteo=sum(criteo),mbuy=sum(mbuy),mforge=sum(mforge),quantcast=sum(quantcast),
sgrid=sum(sgrid),turn=sum(turn),affiliates=sum(affiliates),
display.prospecting=sum(display..prospecting),display.retargeting=sum(display..retargeting),
email.inbound=sum(email..inbound),email.outbound=sum(email..outbound),
organic.search=sum(organic.search),paid.search=sum(paid.search),
referral=sum(referral),tv=sum(tv))
#Correlation plot
corrplot(cor(data_wide[,numeric_inds]))
?corrplot
corrplot(cor(data_wide[,numeric_inds]),title="Correlation Matrix")
corrplot(cor(data_wide[,numeric_inds]),diag=FALSE)
corrplot(cor(data_wide[,numeric_inds]))
View(data_wide)
all_model_no_interaction=lm(revenue~.,data=data_wide)
all_model_no_interaction
summary(all_model_no_interaction)
data_wide$order_number=NULL
corrplot(cor(data_wide))
all_model_no_interaction=lm(revenue~.,data=data_wide)
summary(all_model_no_interaction)
all_model_no_interaction=lm(revenue~0+.,data=data_wide)
summary(all_model_no_interaction)
plot(all_model_no_interaction)
corrplot(cor(data_wide))
library(tidyr)
library(dplyr)
library(corrplot)
source("Ritani_log_analysis_DB_connection.R")
query=paste("
SELECT order_number, name AS channel, state,
max(total) AS revenue, count(*) as session_count
FROM (
SELECT channel_id, clickstream_id, session_id
FROM channel_touchpoints
) ct INNER JOIN (
SELECT id, name, has_attributed_revenue
FROM channels
WHERE has_attributed_revenue=1
) ch ON ct.channel_id=ch.id
INNER JOIN (
SELECT id, pre_purchase
FROM sessions
WHERE pre_purchase=1
) se ON ct.session_id=se.id
INNER JOIN (
--     revenue
SELECT id, order_number, total, state
FROM clickstreams
) cl ON ct.clickstream_id=cl.id
GROUP BY order_number, channel
HAVING state LIKE '%shipped%' OR state LIKE '%accepted%' OR state LIKE '%delivered%'
OR state LIKE '%store%' OR state LIKE '%charged%' OR state LIKE '%authorized%'
OR state LIKE '%shipped%'
")
data_long=tbl_df(dbGetQuery(con,query))
data_long
levels(as.factor(data_long$channel))
data_long=data_long %>% select(order_number,channel,revenue,session_count)
data_long
View(data_long)
disp_inds=grep("display",data_long$channel)
disp_inds
data_long$channel[disp_inds]="display"
View(data_long)
email_inds=grep("email",data_long$channel)
data_long$channel[email_inds]="email"
