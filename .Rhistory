i=1
xshort <-a10[1:(k+(i-1))]
xnext <- a10[(k+i):(k+i+pred_hor)]
(k+(i-1))
(k+i)
(k+i+pred_hor)
fit2 <- Arima(xshort, order=c(0,1,0),include.drift=TRUE, lambda=0, method="ML")
fcast2 <- forecast(fit2, h=pred_hor)
abs(fcast2[['mean']]-xnext)
length(xnext)
mae2<- matrix(NA,eff)
for(i in 1:eff){
xshort <-a10[1:(k+(i-1))]
xnext <- a10[(k+i):(k+(i-1)+pred_hor)]
fit2 <- Arima(xshort, order=c(0,1,0),include.drift=TRUE, lambda=0, method="ML")
fcast2 <- forecast(fit2, h=pred_hor)
mae2[i] <- abs(fcast2[['mean']]-xnext)
}
plot(1:eff, mae2, type="l", col=2, xlab="horizon", ylab="MAE" )
pred_hor=6
k <- 50 # minimum data length for fitting a model
n <- length(a10)
eff=n-k-pred_hor
mae2<- matrix(NA,eff)
for(i in 1:eff){
xshort <-a10[1:(k+(i-1))]
xnext <- a10[(k+i):(k+(i-1)+pred_hor)]
fit2 <- Arima(xshort, order=c(0,1,0),include.drift=TRUE, lambda=0, method="ML")
fcast2 <- forecast(fit2, h=pred_hor)
mae2[i] <- abs(fcast2[['mean']]-xnext)
}
plot(1:eff, mae2, type="l", col=2, xlab="horizon", ylab="MAE" )
pred_hor=7
k <- 50 # minimum data length for fitting a model
n <- length(a10)
eff=n-k-pred_hor
mae2<- matrix(NA,eff)
for(i in 1:eff){
xshort <-a10[1:(k+(i-1))]
xnext <- a10[(k+i):(k+(i-1)+pred_hor)]
fit2 <- Arima(xshort, order=c(0,1,0),include.drift=TRUE, lambda=0, method="ML")
fcast2 <- forecast(fit2, h=pred_hor)
mae2[i] <- abs(fcast2[['mean']]-xnext)
}
plot(1:eff, mae2, type="l", col=2, xlab="horizon", ylab="MAE" )
a10=a10/max(a10)
pred_hor=7
k <- 50 # minimum data length for fitting a model
n <- length(a10)
eff=n-k-pred_hor
mae2<- matrix(NA,eff)
for(i in 1:eff){
xshort <-a10[1:(k+(i-1))]
xnext <- a10[(k+i):(k+(i-1)+pred_hor)]
fit2 <- Arima(xshort, order=c(0,1,0),include.drift=TRUE, lambda=0, method="ML")
fcast2 <- forecast(fit2, h=pred_hor)
mae2[i] <- abs(fcast2[['mean']]-xnext)
}
plot(1:eff, mae2, type="l", col=2, xlab="horizon", ylab="MAE" )
pred_hor=8
k <- 50 # minimum data length for fitting a model
n <- length(a10)
eff=n-k-pred_hor
mae2<- matrix(NA,eff)
for(i in 1:eff){
xshort <-a10[1:(k+(i-1))]
xnext <- a10[(k+i):(k+(i-1)+pred_hor)]
fit2 <- Arima(xshort, order=c(0,1,0),include.drift=TRUE, lambda=0, method="ML")
fcast2 <- forecast(fit2, h=pred_hor)
mae2[i] <- abs(fcast2[['mean']]-xnext)
}
plot(1:eff, mae2, type="l", col=2, xlab="horizon", ylab="MAE" )
pred_hor=9
k <- 50 # minimum data length for fitting a model
n <- length(a10)
eff=n-k-pred_hor
mae2<- matrix(NA,eff)
for(i in 1:eff){
xshort <-a10[1:(k+(i-1))]
xnext <- a10[(k+i):(k+(i-1)+pred_hor)]
fit2 <- Arima(xshort, order=c(0,1,0),include.drift=TRUE, lambda=0, method="ML")
fcast2 <- forecast(fit2, h=pred_hor)
mae2[i] <- abs(fcast2[['mean']]-xnext)
}
plot(1:eff, mae2, type="l", col=2, xlab="horizon", ylab="MAE" )
for(i in 1:eff){
xshort <-a10[1:(k+(i-1))]
xnext <- a10[(k+i):(k+(i-1)+pred_hor)]
# fit2 <- Arima(xshort, order=c(0,1,0),include.drift=TRUE, lambda=0, method="ML")
fit2 <- auto.arima(xshort)
fcast2 <- forecast(fit2, h=pred_hor)
mae2[i] <- abs(fcast2[['mean']]-xnext)
}
plot(1:eff, mae2, type="l", col=2, xlab="horizon", ylab="MAE" )
pred_hor=1
k <- 50 # minimum data length for fitting a model
n <- length(a10)
eff=n-k-pred_hor
mae2<- matrix(NA,eff)
for(i in 1:eff){
xshort <-a10[1:(k+(i-1))]
xnext <- a10[(k+i):(k+(i-1)+pred_hor)]
# fit2 <- Arima(xshort, order=c(0,1,0),include.drift=TRUE, lambda=0, method="ML")
fit2 <- auto.arima(xshort)
fcast2 <- forecast(fit2, h=pred_hor)
mae2[i] <- abs(fcast2[['mean']]-xnext)
}
plot(1:eff, mae2, type="l", col=2, xlab="horizon", ylab="MAE" )
a10=sub_study$organic
pred_hor=1
k <- 50 # minimum data length for fitting a model
n <- length(a10)
eff=n-k-pred_hor
mae2<- matrix(NA,eff)
for(i in 1:eff){
xshort <-a10[1:(k+(i-1))]
xnext <- a10[(k+i):(k+(i-1)+pred_hor)]
# fit2 <- Arima(xshort, order=c(0,1,0),include.drift=TRUE, lambda=0, method="ML")
fit2 <- auto.arima(xshort)
fcast2 <- forecast(fit2, h=pred_hor)
mae2[i] <- abs(fcast2[['mean']]-xnext)
}
plot(1:eff, mae2, type="l", col=2, xlab="horizon", ylab="MAE" )
summary(a10)
pred_hor=1
k <- 60 # minimum data length for fitting a model
n <- length(a10)
eff=n-k-pred_hor
mae2<- matrix(NA,eff)
for(i in 1:eff){
xshort <-a10[1:(k+(i-1))]
xnext <- a10[(k+i):(k+(i-1)+pred_hor)]
# fit2 <- Arima(xshort, order=c(0,1,0),include.drift=TRUE, lambda=0, method="ML")
fit2 <- auto.arima(xshort)
fcast2 <- forecast(fit2, h=pred_hor)
mae2[i] <- abs(fcast2[['mean']]-xnext)
}
plot(1:eff, mae2, type="l", col=2, xlab="horizon", ylab="MAE" )
pred_hor=1
k <- 60 # minimum data length for fitting a model
n <- length(a10)
eff=n-k-pred_hor
mae2<- matrix(NA,eff)
for(i in 1:eff){
xshort <-a10[1:(k+(i-1))]
xnext <- a10[(k+i):(k+(i-1)+pred_hor)]
fit2 <- Arima(xshort, order=c(0,1,0),include.drift=TRUE, lambda=0, method="ML")
# fit2 <- auto.arima(xshort)
fcast2 <- forecast(fit2, h=pred_hor)
mae2[i] <- abs(fcast2[['mean']]-xnext)
}
plot(1:eff, mae2, type="l", col=2, xlab="horizon", ylab="MAE" )
View(sub_study)
a10=sub_study$organic
pred_hor=1
k <- 60 # minimum data length for fitting a model
n <- length(a10)
eff=n-k-pred_hor
mae2<- matrix(NA,eff)
for(i in 1:eff){
xshort <-a10[1:(k+(i-1))]
xnext <- a10[(k+i):(k+(i-1)+pred_hor)]
fit2 <- Arima(xshort, order=c(0,1,0),include.drift=TRUE, lambda=0, method="ML",xreg=sub_study$tv.spend)
# fit2 <- auto.arima(xshort)
fcast2 <- forecast(fit2,xreg=sub_study$tv.spend, h=pred_hor)
mae2[i] <- abs(fcast2[['mean']]-xnext)
}
plot(1:eff, mae2, type="l", col=2, xlab="horizon", ylab="MAE" )
pred_hor=1
k <- 60 # minimum data length for fitting a model
n <- length(a10)
eff=n-k-pred_hor
mae2<- matrix(NA,eff)
for(i in 1:eff){
xshort <-a10[1:(k+(i-1))]
xnext <- a10[(k+i):(k+(i-1)+pred_hor)]
fit2 <- Arima(xshort, order=c(0,1,0),include.drift=TRUE, lambda=0, method="ML",xreg=c(sub_study$tv.spend))
# fit2 <- auto.arima(xshort)
fcast2 <- forecast(fit2,xreg=c(sub_study$tv.spend), h=pred_hor)
mae2[i] <- abs(fcast2[['mean']]-xnext)
}
plot(1:eff, mae2, type="l", col=2, xlab="horizon", ylab="MAE" )
pred_hor=1
k <- 60 # minimum data length for fitting a model
n <- length(a10)
eff=n-k-pred_hor
mae2<- matrix(NA,eff)
i=1
xshort <-a10[1:(k+(i-1))]
xnext <- a10[(k+i):(k+(i-1)+pred_hor)]
fit2 <- Arima(xshort, order=c(0,1,0),include.drift=TRUE, lambda=0, method="ML",xreg=c(sub_study$tv.spend))
xshort <-a10[1:(k+(i-1))]
xnext <- a10[(k+i):(k+(i-1)+pred_hor)]
fit2 <- Arima(xshort, order=c(0,1,0),include.drift=TRUE, lambda=0, method="ML",xreg=c(sub_study$tv.spend[1:(k+(i-1))]))
fcast2 <- forecast(fit2,xreg=c(sub_study$tv.spend[1:(k+(i-1))]), h=pred_hor)
mae2[i] <- abs(fcast2[['mean']]-xnext)
pred_hor
a10=sub_study$organic
pred_hor=5
k <- 60 # minimum data length for fitting a model
n <- length(a10)
eff=n-k-pred_hor
mae2<- matrix(NA,eff)
for(i in 1:eff){
xshort <-a10[1:(k+(i-1))]
xnext <- a10[(k+i):(k+(i-1)+pred_hor)]
fit2 <- Arima(xshort, order=c(0,1,0),include.drift=TRUE, lambda=0, method="ML",xreg=c(sub_study$tv.spend[1:(k+(i-1))]))
# fit2 <- auto.arima(xshort)
fcast2 <- forecast(fit2,xreg=c(sub_study$tv.spend[1:(k+(i-1))]), h=pred_hor)
mae2[i] <- abs(fcast2[['mean']]-xnext)
}
plot(1:eff, mae2, type="l", col=2, xlab="horizon", ylab="MAE" )
a10=sub_study$organic.home
pred_hor=5
k <- 60 # minimum data length for fitting a model
n <- length(a10)
eff=n-k-pred_hor
mae2<- matrix(NA,eff)
for(i in 1:eff){
xshort <-a10[1:(k+(i-1))]
xnext <- a10[(k+i):(k+(i-1)+pred_hor)]
fit2 <- Arima(xshort, order=c(0,1,0),include.drift=TRUE, lambda=0, method="ML",xreg=c(sub_study$tv.spend[1:(k+(i-1))]))
# fit2 <- auto.arima(xshort)
fcast2 <- forecast(fit2,xreg=c(sub_study$tv.spend[1:(k+(i-1))]), h=pred_hor)
mae2[i] <- abs(fcast2[['mean']]-xnext)
}
plot(1:eff, mae2, type="l", col=2, xlab="horizon", ylab="MAE" )
a10=sub_study$paid.brand.sessions
pred_hor=5
k <- 60 # minimum data length for fitting a model
n <- length(a10)
eff=n-k-pred_hor
mae2<- matrix(NA,eff)
for(i in 1:eff){
xshort <-a10[1:(k+(i-1))]
xnext <- a10[(k+i):(k+(i-1)+pred_hor)]
fit2 <- Arima(xshort, order=c(0,1,0),include.drift=TRUE, lambda=0, method="ML",xreg=c(sub_study$tv.spend[1:(k+(i-1))]))
# fit2 <- auto.arima(xshort)
fcast2 <- forecast(fit2,xreg=c(sub_study$tv.spend[1:(k+(i-1))]), h=pred_hor)
mae2[i] <- abs(fcast2[['mean']]-xnext)
}
plot(1:eff, mae2, type="l", col=2, xlab="horizon", ylab="MAE" )
for(i in 1:eff){
xshort <-a10[1:(k+(i-1))]
xnext <- a10[(k+i):(k+(i-1)+pred_hor)]
fit2 <- Arima(xshort, order=c(1,1,0),include.drift=TRUE, lambda=0, method="ML",xreg=c(sub_study$tv.spend[1:(k+(i-1))]))
# fit2 <- auto.arima(xshort)
fcast2 <- forecast(fit2,xreg=c(sub_study$tv.spend[1:(k+(i-1))]), h=pred_hor)
mae2[i] <- abs(fcast2[['mean']]-xnext)
}
plot(1:eff, mae2, type="l", col=2, xlab="horizon", ylab="MAE" )
a10=sub_study$organic
pred_hor=5
k <- 60 # minimum data length for fitting a model
n <- length(a10)
eff=n-k-pred_hor
mae2<- matrix(NA,eff)
for(i in 1:eff){
xshort <-a10[1:(k+(i-1))]
xnext <- a10[(k+i):(k+(i-1)+pred_hor)]
fit2 <- Arima(xshort, order=c(1,1,0),include.drift=TRUE, lambda=0, method="ML",xreg=c(sub_study$tv.spend[1:(k+(i-1))]))
# fit2 <- auto.arima(xshort)
fcast2 <- forecast(fit2,xreg=c(sub_study$tv.spend[1:(k+(i-1))]), h=pred_hor)
mae2[i] <- abs(fcast2[['mean']]-xnext)
}
plot(1:eff, mae2, type="l", col=2, xlab="horizon", ylab="MAE" )
library(tidyr)
library(dplyr)
library(openxlsx)
library(lubridate)
library(ggplot2)
library(tidyr)
library(dplyr)
library(openxlsx)
library(ggplot2)
library(gridExtra)
library(forecast)
library(stats)
library(pander)
install.packages("pander")
install.packages("openxlsx")
library(tidyr)
library(dplyr)
library(openxlsx)
library(lubridate)
library(ggplot2)
library(gridExtra)
library(forecast)
library(stats)
library(pander)
tv_data=tbl_df(read.xlsx("tvanalysis.xlsx",sheet=2,rows=c(1:95),cols=c(1,4:20)))
tv_data$date=as.Date(as.character(tv_data$date),"%m/%d/%Y")+years(2000)
na_inds=which(is.na(tv_data$date))
for (ind in na_inds) {tv_data$date[ind]=tv_data$date[(ind-1)]+weeks(1)}
study_vars=c("date","tv.spend","organic","organic.home","direct.home","paid.brand.sessions")
study_cols=which(names(tv_data) %in% study_vars)
sub_study=na.omit(tv_data[,study_cols]  %>% arrange(desc(date)))
sub_study=sub_study[-1,]
sub_study$paid.brand.sessions=as.numeric(as.character(sub_study$paid.brand.sessions))
poly_fit=lm(data=sub_study,organic~tv.spend+I(tv.spend^2))
tmp_df=data.frame(round(coef(poly_fit),3))
tmp_df=rbind(tmp_df,cor(fitted(poly_fit),sub_study$organic)^2)
rownames(tmp_df)[length(rownames(tmp_df))]="R2"
print(tmp_df)
big_poly_fit=lm(data=sub_study,organic~tv.spend+I(tv.spend^2)+I(tv.spend^3)+I(tv.spend^4))
stepwise_model=step(big_poly_fit,k=log(nrow(mtcars)))
tmp_df=data.frame(round(coef(stepwise_model),3))
tmp_df=rbind(tmp_df,cor(fitted(stepwise_model),sub_study$organic)^2)
rownames(tmp_df)[length(rownames(tmp_df))]="R2"
print(tmp_df)
acf(stepwise_model$residuals,ylab="Correlation",main="Autocorrelation of Residuals")
stl_obj=stl(ts(sub_study$organic, frequency = 26), s.window="periodic",robust=TRUE)
plot(stl_obj)+title("Organic Seasonal Decomposition")
xreg_matrix<-model.matrix(formula(stepwise_model),data=sub_study)
xreg_matrix=xreg_matrix[,-1]
tv_arima=auto.arima(sub_study$organic,xreg=xreg_matrix,max.p=10)
summary(tv_arima)
tv_arima_fcast=forecast(tv_arima,xreg=xreg_matrix)
plot(tv_arima_fcast)
tv_arima_R2=round(cor(fitted(tv_arima_fcast),sub_study$organic)^2,2)
tmp_df=data.frame(coef(tv_arima))
tmp_df=rbind(tmp_df,tv_arima_R2)
rownames(tmp_df)[length(rownames(tmp_df))]="R2"
print(tmp_df)
tmp_df=data.frame(tv.spend=sub_study$tv.spend,channel=sub_study$organic,poly=fitted(poly_fit),
step=fitted(stepwise_model),arima=fitted(tv_arima_fcast))
tmp_df
View(sub_study)
ggplot(tmp_df) + theme_bw()+
geom_line(aes(x=tv.spend,y=channel,color="Organic"))+
geom_line(aes(x=tv.spend,y=poly,color="2nd Order Plynomial Fit"))+
geom_line(aes(x=tv.spend,y=step,color="Stepwise Polynomial Fit"))+
geom_line(aes(x=tv.spend,y=channel,color="Arima Fit"))
ggplot(tmp_df) + theme_bw()+
geom_point(aes(x=tv.spend,y=channel,color="Organic"))+
geom_line(aes(x=tv.spend,y=poly,color="2nd Order Plynomial Fit"))+
geom_line(aes(x=tv.spend,y=step,color="Stepwise Polynomial Fit"))+
geom_line(aes(x=tv.spend,y=channel,color="Arima Fit"))+
ggtitle("Traffic")+xlab("Date")+ylab("Visits")+
guides(color=guide_legend(title="Source"))
ggplot(tmp_df) + theme_bw()+
geom_point(aes(x=tv.spend,y=channel,color="Organic"))+
geom_line(aes(x=tv.spend,y=poly,color="2nd Order Plynomial Fit"))
ggplot(tmp_df) + theme_bw()+
geom_point(aes(x=tv.spend,y=channel,color="Organic"))+
geom_line(aes(x=tv.spend,y=poly,color="2nd Order Plynomial Fit"))+
geom_line(aes(x=tv.spend,y=step,color="Stepwise Polynomial Fit"))
ggplot(tmp_df) + theme_bw()+
geom_point(aes(x=tv.spend,y=channel,color="Organic"))+
geom_line(aes(x=tv.spend,y=poly,color="2nd Order Plynomial Fit"))+
geom_line(aes(x=tv.spend,y=step,color="Stepwise Polynomial Fit"))+
geom_line(aes(x=tv.spend,y=channel,color="Arima Fit"))
plot(stepwise_model)
plot(stepwise_model$residuals)
plot(poly_fit$residuals)
plot(tv_arima_fcast$residuals)
tv_spend_plot=ggplot(sub_study) + theme_bw()+
geom_line(aes(x=date,y=tv.spend,color="TV Spending")) +
xlab("Date")+ylab("Dollars") +
guides(color=guide_legend(title=NULL))
traffic_plot=ggplot(sub_study) + theme_bw()+
geom_line(aes(x=date,y=organic,color="Organic"))+
geom_line(aes(x=date,y=organic.home,color="Organic Home"))+
geom_line(aes(x=date,y=direct.home,color="Direct Home"))+
geom_line(aes(x=date,y=paid.brand.sessions,color="Paid Brand"))+
ggtitle("Traffic")+xlab("Date")+ylab("Visits")+
guides(color=guide_legend(title="Source"))
grid.arrange(traffic_plot, tv_spend_plot, ncol = 1)
stl_obj=stl(ts(sub_study$organic, frequency = 2),t.window=15,s.window="periodic",robust=TRUE)
plot(stl_obj)+title("Organic Seasonal Decomposition")
stl_obj=stl(ts(sub_study$organic, frequency = 26), s.window="periodic",robust=TRUE)
plot(stl_obj)+title("Organic Seasonal Decomposition")
library(pander)
tv_data=tbl_df(read.xlsx("tvanalysis.xlsx",sheet=2,rows=c(1:95),cols=c(1,4:20)))
tv_data$date=as.Date(as.character(tv_data$date),"%m/%d/%Y")+years(2000)
na_inds=which(is.na(tv_data$date))
for (ind in na_inds) {tv_data$date[ind]=tv_data$date[(ind-1)]+weeks(1)}
study_vars=c("date","tv.spend","organic","organic.home","direct.home","paid.brand.sessions")
study_cols=which(names(tv_data) %in% study_vars)
sub_study=na.omit(tv_data[,study_cols]  %>% arrange(desc(date)))
sub_study=sub_study[-1,]
sub_study$paid.brand.sessions=as.numeric(as.character(sub_study$paid.brand.sessions))
cor(sub_study[,sapply(sub_study,is.numeric)])[1,]
vars<-c("organic","organic.home","direct.home","paid.brand.sessions")
ccf.df=data.frame(Correlation=NULL,Lag=NULL,Source=NULL)
for (var in vars) {
ind=which(names(sub_study) == var)
ccf_temp<-ccf(sub_study$tv.spend,sub_study[,ind],plot=FALSE)
ccf_temp_df=data.frame(Correlation=ccf_temp$acf,Lag=ccf_temp$lag,Source=rep(var,length(ccf_temp$lag)))
ccf.df<-rbind(ccf.df,ccf_temp_df)
}
CCF_plot<-ggplot(ccf.df,aes(x=Lag,y=Correlation,color=Source))+ theme_bw()+
geom_point()+ggtitle("TV Spending Delayed Effect")+xlab("Lag (Weeks)")+
scale_color_manual( values=c("red","green","blue","purple"),
name="Source",
breaks=vars,
labels=c("Organic", "Organic Home", "Direct Home","Paid Brand"))
CCF_plot
sub_study$tv_lag_7=c(rep(NA,7),sub_study$tv.spend[1:(length(sub_study$tv.spend)-7)])
poly_fit=lm(data=sub_study,organic~tv.spend+I(tv.spend^2))
tmp_df=data.frame(round(coef(poly_fit),3))
tmp_df=rbind(tmp_df,cor(fitted(poly_fit),sub_study$organic)^2)
rownames(tmp_df)[length(rownames(tmp_df))]="R2"
pander(tmp_df)
big_poly_fit=lm(data=sub_study,organic~tv.spend+I(tv.spend^2)+I(tv.spend^3)+I(tv.spend^4))
stepwise_model=step(big_poly_fit,k=log(nrow(mtcars)))
tmp_df=data.frame(round(coef(stepwise_model),3))
tmp_df=rbind(tmp_df,cor(fitted(stepwise_model),sub_study$organic)^2)
rownames(tmp_df)[length(rownames(tmp_df))]="R2"
pander(tmp_df)
acf(stepwise_model$residuals,ylab="Correlation",main="Autocorrelation of Residuals")
tmp_df=data.frame(tv.spend=sub_study$tv.spend,channel=sub_study$organic,poly=fitted(poly_fit),
step=fitted(stepwise_model))
ggplot(tmp_df) + theme_bw()+
geom_point(aes(x=tv.spend,y=channel,color="Organic"))+
geom_line(aes(x=tv.spend,y=poly,color="2nd Order Plynomial Fit"))+
geom_line(aes(x=tv.spend,y=step,color="Stepwise Polynomial Fit"))+
ggtitle("Model Fits")+xlab("TV Speding (Dollars)")+ylab("Visits")+
guides(color=guide_legend(title="Models"))
acf(stepwise_model$residuals,ylab="Correlation",main="Autocorrelation of Residuals")
pacf(stepwise_model$residuals,ylab="Correlation",main="Partial Autocorrelation of Residuals")
plot(dif(sub_study$channel))
plot(diff(sub_study$channel))
diff(sub_study$channel)
plot(diff(sub_study$channesl))
diff(sub_study$channesl)
plot(diff(sub_study$channels))
diff(sub_study$channels)
plot(sub_study$channels)
sub_study$channels
plot(diff(sub_study$organic))
plot(sub_study$organic)
plot(sub_study$organic)
plot(diff(sub_study$organic))
plot(sub_study$organic)
plot(diff(sub_study$organic))
acf(stepwise_model$residuals,ylab="Correlation",main="Autocorrelation of Residuals")
acf(stepwise_model$residuals,ylab="Correlation",main="Autocorrelation of Residuals")
"lag"
?lag
plot(sub_study$organic,lag(sub_study$organic))
acf(stepwise_model$residuals,ylab="Correlation",main="Autocorrelation of Residuals")
plot(sub_study$organic)
plot(sub_study$organic,lag(sub_study$organic))
pacf(stepwise_model$residuals,ylab="Correlation",main="Partial Autocorrelation of Residuals")
plot(diff(sub_study$organic))
plot(stepwise_model$residuals)
plot(stepwise_model$residuals)
acf(stepwise_model$residuals,ylab="Correlation",main="Autocorrelation of Residuals")
plot(sub_study$organic)
plot(sub_study$organic,lag(sub_study$organic))
pacf(stepwise_model$residuals,ylab="Correlation",main="Partial Autocorrelation of Residuals")
plot(diff(sub_study$organic))
pacf(stepwise_model$residuals,ylab="Correlation",main="Partial Autocorrelation of Residuals")
plot(diff(sub_study$organic))
plot(sub_study$tv.spend,diff(sub_study$organic))
plot(lag(sub_study$tv.spend),diff(sub_study$organic))
length(diff(sub_study$organic))
length(sub_study$tv.spend))
length(sub_study$tv.spend)
plot(sub_study$tv.spend[2:length(sub_study$tv.spend)],diff(sub_study$organic))
plot(sub_study$tv.spend,sub_study$organic)
plot(diff(sub_study$organic))
plot(diff(stepwise_model$residuals))
plot(stepwise_model$residuals)
plot(diff(stepwise_model$residuals))
plot(sub_study$tv.spend,sub_study$organic)
plot(sub_study$tv.spend[2:length(sub_study$tv.spend)],diff(sub_study$organic))
plot(sub_study$tv.spend[2:length(sub_study$tv.spend)],diff(stepwise_model$residuals))
plot(filter(sub_study$organic,rep(1/2,2)))
install.packages("TTR")
library(TTR)
?SMA
plot(sub_study$tv.spend[2:length(sub_study$tv.spend)],diff(stepwise_model$residuals))
SMA(sub_study$organic)
SMA(sub_study$organic,n=2)
plot(SMA(sub_study$organic,n=2))
plot(SMA(sub_study$organic,n=2))
plot(SMA(sub_study$organic,n=3))
plot(SMA(sub_study$organic,n=4))
plot(SMA(sub_study$organic,n=10))
plot(SMA(diff(stepwise_model$residuals),n=10))
plot(SMA(diff(stepwise_model$residuals),n=2))
plot(diff(stepwise_model$residuals))
plot(SMA(diff(stepwise_model$residuals),n=2))
stl_obj=stl(ts(sub_study$organic, frequency = 26), s.window="periodic",robust=TRUE)
plot(stl_obj)+title("Organic Seasonal Decomposition")
xreg_matrix<-model.matrix(formula(stepwise_model),data=sub_study)
xreg_matrix=xreg_matrix[,-1]
tv_arima=auto.arima(sub_study$organic,xreg=xreg_matrix,max.p=10)
tv_arima_fcast=forecast(tv_arima,xreg=xreg_matrix)
plot(tv_arima_fcast)
tv_arima_R2=round(cor(fitted(tv_arima_fcast),sub_study$organic)^2,2)
tmp_df=data.frame(coef(tv_arima))
tmp_df=rbind(tmp_df,tv_arima_R2)
rownames(tmp_df)[length(rownames(tmp_df))]="R2"
pander(tmp_df)
pacf(stepwise_model$residuals,ylab="Correlation",main="Partial Autocorrelation of Residuals")
plot(diff(stepwise_model$residuals))
pander(tmp_df)
plot(tv_arima_fcast)
length(fitted(tv_arima_fcast))
plot(fitted(tv_arima_fcast),sub_study$organic)
pander(tmp_df)
plot(fitted(poly_fit),sub_study$organic)
plot(fitted(stepwise_model),sub_study$organic)
plot(as.vector(fitted(tv_arima_fcast)),sub_study$organic)
plot(fitted(poly_fit),sub_study$organic)
plot(fitted(stepwise_model),sub_study$organic)
plot(as.vector(fitted(tv_arima_fcast)),sub_study$organic)
stl_obj=stl(ts(sub_study$organic, frequency = 26), s.window="periodic",robust=TRUE)
plot(stl_obj)+title("Organic Seasonal Decomposition")
