CCF_plot
ccf.df[which(ccf.df$Lag==0),c(1,3)]
load(file="channel_sessions_long_airings.rda")
vars<-c("organic.net.home","organic.home","direct.net.home","direct.home","paid.brand.sessions")
ccf.df=data.frame(Correlation=NULL,Lag=NULL,Source=NULL)
for (var in vars) {
print(var)
ind=which(names(channel_sessions_long) == var)
study_var=channel_sessions_long[,ind]
na_inds=which(is.na(study_var))
Airings=channel_sessions_long$Airings[-na_inds]
study_var=na.omit(study_var)
ccf_temp<-ccf(tv,study_var,plot=FALSE)
ccf_temp_df=data.frame(Correlation=ccf_temp$acf,Lag=ccf_temp$lag,Source=rep(var,length(ccf_temp$lag)))
ccf.df<-rbind(ccf.df,ccf_temp_df)
}
CCF_plot<-ggplot(ccf.df,aes(x=Lag,y=Correlation,color=Source))+ theme_bw()+
geom_point()+ggtitle("TV Airings Delayed Effect")+xlab("Lag (Days)")+
scale_color_manual( values=rainbow(length(vars)),
name="Source",
breaks=vars,
labels=vars)
CCF_plot
airings_data=tbl_df(read_excel("Ritani Weekly TV Report 10.19.15 with historical.xlsx",
sheet=2))
airings_data$date=as.Date(airings_data$Date.Time)
View(airings_data)
ccf.df
CCF_plot<-ggplot(ccf.df %>% filter(Lag>=0),aes(x=Lag,y=Correlation,color=Source))+ theme_bw()+
geom_point()+ggtitle("TV Airings Delayed Effect")+xlab("Lag (Days)")+
scale_color_manual( values=rainbow(length(vars)),
name="Source",
breaks=vars,
labels=vars)
CCF_plot
library(tidyr)
library(dplyr)
library(openxlsx)
library(lubridate)
library(ggplot2)
library(gridExtra)
library(forecast)
library(stats)
library(pander)
library(TTR)
load(file="channel_sessions_long.rda")
#Correlations
vars<-c("organic.net.home","organic.home","direct.net.home","direct.home","paid.brand.sessions")
ccf.df=data.frame(Correlation=NULL,Lag=NULL,Source=NULL)
for (var in vars) {
ind=which(names(channel_sessions_long) == var)
study_var=channel_sessions_long[,ind]
na_inds=which(is.na(study_var))
tv=channel_sessions_long$tv.spend[-na_inds]
study_var=na.omit(study_var)
ccf_temp<-ccf(tv,study_var,plot=FALSE)
ccf_temp_df=data.frame(Correlation=ccf_temp$acf,Lag=ccf_temp$lag,Source=rep(var,length(ccf_temp$lag)))
ccf.df<-rbind(ccf.df,ccf_temp_df)
}
CCF_plot<-ggplot(ccf.df %>% filter(Lag>=0),aes(x=Lag,y=Correlation,color=Source))+ theme_bw()+
geom_point()+ggtitle("TV Spending Delayed Effect")+xlab("Lag (Weeks)")+
scale_color_manual( values=rainbow(length(vars)),
name="Source",
breaks=vars,
labels=vars)
CCF_plot
library(tidyr)
library(dplyr)
library(lubridate)
library(ggplot2)
library(gridExtra)
library(forecast)
library(stats)
library(pander)
library(TTR)
library(googlesheets)
library(readxl)
load(file="channel_sessions_long_airings.rda")
#Correlations
vars<-c("organic.net.home","organic.home","direct.net.home","direct.home","paid.brand.sessions")
ccf.df=data.frame(Correlation=NULL,Lag=NULL,Source=NULL)
for (var in vars) {
print(var)
ind=which(names(channel_sessions_long) == var)
study_var=channel_sessions_long[,ind]
na_inds=which(is.na(study_var))
Airings=channel_sessions_long$Airings[-na_inds]
study_var=na.omit(study_var)
ccf_temp<-ccf(tv,study_var,plot=FALSE)
ccf_temp_df=data.frame(Correlation=ccf_temp$acf,Lag=ccf_temp$lag,Source=rep(var,length(ccf_temp$lag)))
ccf.df<-rbind(ccf.df,ccf_temp_df)
}
CCF_plot<-ggplot(ccf.df %>% filter(Lag>=0),aes(x=Lag,y=Correlation,color=Source))+ theme_bw()+
geom_point()+ggtitle("TV Airings Delayed Effect")+xlab("Lag (Days)")+
scale_color_manual( values=rainbow(length(vars)),
name="Source",
breaks=vars,
labels=vars)
CCF_plot
ccf.df %>% filter(Lag==0)
ccf.df
?pacf
load(file="channel_sessions_long.rda")
channel_session_gathered=channel_sessions_long %>% gather(key=channel,value=sessions,2:6)
ggplot(channel_session_gathered)+theme_bw()+
geom_line(aes(x=date,y=sessions,color=channel))
ggplot(channel_session_gathered %>% filter(channel != "tv.spend"))+theme_bw()+
geom_line(aes(x=date,y=sessions,color=channel))
ggplot(channel_session_gathered %>% filter(channel == "tv.spend"))+theme_bw()+
geom_line(aes(x=date,y=sessions,color=channel))
sessions_plot=ggplot(channel_session_gathered %>% filter(channel != "tv.spend"))+theme_bw()+
geom_line(aes(x=date,y=sessions,color=channel))
tv_plot=ggplot(channel_session_gathered %>% filter(channel == "tv.spend"))+theme_bw()+
geom_line(aes(x=date,y=sessions,color=channel))
grid.arrange(sessions_plot, tv_plot, ncol=1)
channel_session_gathered
channel_session_gathered$Units="Visits"
channel_session_gathered$Units[which(channel_session_gathered$channel=="tv.spend")]="Dollars"
channel_session_gathered
ggplot(channel_session_gathered)+theme_bw()+
geom_line(aes(x=date,y=sessions,color=channel))+facet_grid(.~Units)
ggplot(channel_session_gathered)+theme_bw()+
geom_line(aes(x=date,y=sessions,color=channel))+facet_grid(Units~.)
ggplot(channel_session_gathered)+theme_bw()+
geom_line(aes(x=date,y=sessions,color=channel))+facet_grid(Units~.,scales="free")
ggplot(channel_session_gathered)+theme_bw()+
geom_line(aes(x=date,y=sessions,color=channel))+facet_grid(Units~.,scales="free")+xlab("")
ggplot(channel_session_gathered)+theme_bw()+
geom_line(aes(x=date,y=sessions,color=channel))+facet_grid(Units~.,scales="free")+ylab("")
ggplot(channel_session_gathered)+theme_bw()+
geom_line(aes(x=date,y=sessions,color=channel))+
facet_grid(Units~.,scales="free")+ylab("")+xlab("Date")+
ggtitle("Tv Spending And Channel Sessions")
load(file="channel_sessions_long_airings.rda")
channel_session_gathered=channel_sessions_long %>% gather(key=channel,value=sessions,2:6)
channel_session_gathered$Units="Sessions"
channel_session_gathered=channel_sessions_long %>% gather(key=channel,value=sessions,2:6)
channel_session_gathered$Units="Sessions"
channel_session_gathered$Units[which(channel_session_gathered$channel=="Airings")]="Airings"
ggplot(channel_session_gathered)+theme_bw()+
geom_line(aes(x=date,y=sessions,color=channel))+
facet_grid(Units~.,scales="free")+ylab("")+xlab("Date")+
ggtitle("Airings And Channel Sessions")
load(file="channel_sessions_long_airings.rda")
channel_session_gathered=channel_sessions_long %>% gather(key=channel,value=sessions,2:6)
channel_session_gathered$Units="Sessions"
channel_session_gathered$Units[which(channel_session_gathered$channel=="Airings")]="Airings"
ggplot(channel_session_gathered)+theme_bw()+
geom_line(aes(x=date,y=sessions,color=channel))+
facet_grid(Units~.,scales="free")+ylab("")+xlab("Date")+
ggtitle("Daily Airings And Channel Sessions")
vars<-c("organic.net.home","organic.home","direct.net.home","direct.home","paid.brand.sessions")
ccf.df=data.frame(Correlation=NULL,Lag=NULL,Source=NULL)
for (var in vars) {
print(var)
ind=which(names(channel_sessions_long) == var)
study_var=channel_sessions_long[,ind]
na_inds=which(is.na(study_var))
Airings=channel_sessions_long$Airings[-na_inds]
study_var=na.omit(study_var)
ccf_temp<-ccf(tv,study_var,plot=FALSE)
ccf_temp_df=data.frame(Correlation=ccf_temp$acf,Lag=ccf_temp$lag,Source=rep(var,length(ccf_temp$lag)))
ccf.df<-rbind(ccf.df,ccf_temp_df)
}
CCF_plot<-ggplot(ccf.df %>% filter(Lag>=0),aes(x=Lag,y=Correlation,color=Source))+ theme_bw()+
geom_point()+ggtitle("TV Airings Delayed Effect")+xlab("Lag (Days)")+
scale_color_manual( values=rainbow(length(vars)),
name="Source",
breaks=vars,
labels=vars)
CCF_plot
load(file="channel_sessions_long_airings.rda")
#Correlations
vars<-c("organic.net.home","organic.home","direct.net.home","direct.home","paid.brand.sessions")
ccf.df=data.frame(Correlation=NULL,Lag=NULL,Source=NULL)
for (var in vars) {
print(var)
ind=which(names(channel_sessions_long) == var)
study_var=channel_sessions_long[,ind]
na_inds=which(is.na(study_var))
Airings=channel_sessions_long$Airings[-na_inds]
study_var=na.omit(study_var)
ccf_temp<-ccf(Airings,study_var,plot=FALSE)
ccf_temp_df=data.frame(Correlation=ccf_temp$acf,Lag=ccf_temp$lag,Source=rep(var,length(ccf_temp$lag)))
ccf.df<-rbind(ccf.df,ccf_temp_df)
}
CCF_plot<-ggplot(ccf.df %>% filter(Lag>=0),aes(x=Lag,y=Correlation,color=Source))+ theme_bw()+
geom_point()+ggtitle("TV Airings Delayed Effect")+xlab("Lag (Days)")+
scale_color_manual( values=rainbow(length(vars)),
name="Source",
breaks=vars,
labels=vars)
CCF_plot
load(file="channel_sessions_long.rda")
study_var=channel_sessions_long$organic.net.home
na_inds=which(is.na(study_var))
tv=channel_sessions_long$tv.spend[-na_inds]
study_var=na.omit(study_var)
date=channel_sessions_long$date[-na_inds]
title_paste="Organic Net Home"
tv_arima=auto.arima(study_var,xreg=c(tv),max.P=0,max.D = 0,max.Q = 0,allowdrift=FALSE,allowmean = FALSE)
summary(tv_arima)
study_var=channel_sessions_long$paid.brand.sessions
na_inds=which(is.na(study_var))
tv=channel_sessions_long$tv.spend[-na_inds]
study_var=na.omit(study_var)
date=channel_sessions_long$date[-na_inds]
title_paste="Paid Brand"
ts_var=ts(study_var, frequency = 52)
stl_obj=try(stl(ts_var, s.window="periodic",robust=TRUE))
if (class(stl_obj)=="try-error") {
ts_var=ts(study_var, frequency = 26)
stl_obj=stl(ts_var, s.window="periodic",robust=TRUE)
}
plot(stl_obj)+title(paste(title_paste,"Seasonal Trend Decomposition"))
tv_arima=auto.arima(ts_var,xreg=c(tv),max.P=0,max.D = 0,max.Q = 0,allowdrift=FALSE,allowmean=FALSE)
arima_object=tv_arima
summary(arima_object)
coef(arima_object)
grep("ar",names(coef(tv_arima)))
ar_inds=grep("ar",names(coef(tv_arima)))
ar_inds
count=0
ar_formula="(1"
ar_ind=1
count=count+1
if (sum(ar_inds)>0){
count=0
ar_formula="(1"
for (ar_ind in ar_inds){
count=count+1
ar_formula=paste0(ar_formula,"-",coef(tv_arima)[ar_ind]),"*B^(",count,")")
}
ar_formula=paste0(ar_formula,")"
}
ar_inds=grep("ar",names(coef(tv_arima)))
(sum(ar_inds)>0)
if (sum(ar_inds)>0){
count=0
ar_formula="(1"
for (ar_ind in ar_inds){
count=count+1
ar_formula=paste0(ar_formula,"-",coef(tv_arima)[ar_ind]),"*B^(",count,")")
}
ar_formula=paste0(ar_formula,")"
}
if (sum(ar_inds)>0){
count=0
ar_formula="(1"
for (ar_ind in ar_inds){
count=count+1
ar_formula=paste0(ar_formula,"-",coef(tv_arima)[ar_ind]),"*B^(",count,")")
}
ar_formula=paste0(ar_formula,")")
}
count=0
ar_formula="(1"
for (ar_ind in ar_inds) {
count=count+1
ar_formula=paste0(ar_formula,"-",coef(tv_arima)[ar_ind]),"*B^(",count,")")
ar_inds=grep("ar",names(coef(tv_arima)))
if (sum(ar_inds)>0){
count=0
ar_formula="(1"
for (ar_ind in ar_inds) {
count=count+1
ar_formula=paste0(ar_formula,"-",coef(tv_arima)[ar_ind],"*B^(",count,")"))
}
ar_formula=paste0(ar_formula,")")
}
coef(tv_arima)[ar_ind]
count
count=count+1
ar_formula=paste0(ar_formula,"-",coef(tv_arima)[ar_ind],"*B^(",count,")"))
count=0
ar_formula="(1"
count=count+1
ar_formula=paste0(ar_formula,"-",coef(tv_arima)[ar_ind],"*B^(",count,")"))
if (sum(ar_inds)>0){
count=0
ar_formula="(1"
for (ar_ind in ar_inds) {
count=count+1
ar_formula=paste0(ar_formula,"-",coef(tv_arima)[ar_ind],"*B^(",count,")")
}
ar_formula=paste0(ar_formula,")")
}
ar_formula
ar_inds=grep("ar",names(coef(tv_arima)))
if (sum(ar_inds)>0){
count=0
ar_formula="(1"
for (ar_ind in ar_inds) {
count=count+1
this_coef=round(coef(tv_arima)[ar_ind],4)
ar_formula=paste0(ar_formula,"-",this_coef,"*B^(",count,")")
}
ar_formula=paste0(ar_formula,")")
}
ar_formula
ma_inds=grep("ma",names(coef(tv_arima)))
ma_inds
count=0
ma_formula="(1"
for (ma_ind in ma_inds) {
count=count+1
this_coef=round(coef(tv_arima)[ma_ind],4)
ma_formula=paste0(ma_formula,"-",this_coef,"*B^(",count,")")
}
ma_formula=paste0(ma_formula,")")
ma_formula
str(arima_object)
getAnywhere(arima.string)
arima.string1(fm)
forecast(arima_object)$method
forecast(tv_arima,xreg=c(tv))$method
substr(forecast(tv_arima,xreg=c(tv))$method,3,4)
substr(forecast(tv_arima,xreg=c(tv))$method,6,7)
substr(forecast(tv_arima,xreg=c(tv))$method,8,8)
substr(forecast(tv_arima,xreg=c(tv))$method,9,9)
as.numeric(substr(forecast(tv_arima,xreg=c(tv))$method,9,9))
I_inds=as.numeric(substr(forecast(tv_arima,xreg=c(tv))$method,9,9))
I_inds=as.numeric(substr(forecast(tv_arima,xreg=c(tv))$method,9,9))
if (sum(I_inds)>0){
count=0
I_formula="(1"
for (ma_ind in I_inds) {
count=count+1
I_formula=paste0(I_formula,"-*B^(",count,")")
}
I_formula=paste0(I_formula,")")
}
I_formula
final_formula=paste0(ar_formula,I_formula,"y_t=",ar_formula,I_formula,"x_t+",ma_formula,"e_t")
final_formula
ar_inds=grep("ar",names(coef(tv_arima)))
if (sum(ar_inds)>0){
count=0
ar_formula="(1"
for (ar_ind in ar_inds) {
count=count+1
this_coef=round(coef(tv_arima)[ar_ind],4)
ar_formula=paste0(ar_formula,"-(",this_coef,")*B^(",count,")")
}
ar_formula=paste0(ar_formula,")")
} else {ar_formula=""}
#Isolating MA parts
ma_inds=grep("ma",names(coef(tv_arima)))
if (sum(ma_inds)>0){
count=0
ma_formula="(1"
for (ma_ind in ma_inds) {
count=count+1
this_coef=round(coef(tv_arima)[ma_ind],4)
ma_formula=paste0(ma_formula,"-(",this_coef,")*B^(",count,")")
}
ma_formula=paste0(ma_formula,")")
} else {ma_formula=""}
#Isolating differencing
I_inds=as.numeric(substr(forecast(tv_arima,xreg=c(tv))$method,9,9))
if (sum(I_inds)>0){
count=0
I_formula="(1"
for (ma_ind in I_inds) {
count=count+1
I_formula=paste0(I_formula,"-B^(",count,")")
}
I_formula=paste0(I_formula,")")
} else {I_formula=""}
final_formula=paste0(ar_formula,I_formula,"y_t=",ar_formula,I_formula,"x_t+",ma_formula,"e_t")
final_formula
tv_coef=coef(tv_arima)[grep("tv",names(coef(tv_arima)))]
final_formula=paste0(ar_formula,I_formula,"y_t=",tv_coef,"*",ar_formula,I_formula,"x_t+",ma_formula,"e_t")
final_formula
tv_coef=round(coef(tv_arima)[grep("tv",names(coef(tv_arima)))],4)
final_formula=paste0(ar_formula,I_formula,"y_t=",tv_coef,"*",ar_formula,I_formula,"x_t+",ma_formula,"e_t")
final_formula
final_formula=paste0(ar_formula,"*",I_formula,"*y_t=",
tv_coef,"*",ar_formula,"*",I_formula,"*x_t+",ma_formula,"*e_t")
final_formula
source("arima_formula.R")
source("arima_formula.R")
load(file="channel_sessions_long.rda")
study_var=channel_sessions_long$organic.net.home
na_inds=which(is.na(study_var))
tv=channel_sessions_long$tv.spend[-na_inds]
study_var=na.omit(study_var)
date=channel_sessions_long$date[-na_inds]
title_paste="Organic Net Home"
poly_fit=lm(study_var~tv+I(tv^2))
tmp_df=data.frame(round(coef(poly_fit),3))
tmp_df=rbind(tmp_df,cor(fitted(poly_fit),na.omit(study_var))^2)
rownames(tmp_df)[length(rownames(tmp_df))]="R2"
pander(tmp_df)
ts_var=ts(study_var, frequency = 52)
stl_obj=stl(ts_var, s.window="periodic",robust=TRUE)
plot(stl_obj)+title(paste(title_paste,"Seasonal Trend Decomposition"))
tv_arima=auto.arima(study_var,xreg=c(tv),max.P=0,max.D = 0,max.Q = 0,allowdrift=FALSE,allowmean = FALSE)
summary(tv_arima)
arima_formula(tv_arima)
source('~/GitHub/Ritani/arima_formula.R')
arima_formula(tv_arima)
summary(tv_arima)
arima_formula(tv_arima)
pander(arima_formula(tv_arima))
pander(tv_arima)
tv_arima_fcast=forecast(tv_arima,xreg=c(tv),h=0)
pander(tv_arima_fcast)
pander(summary(tv_arima))
pander(summary(tv_arima))
tv_data=tbl_df(read.xlsx("tvanalysis.xlsx",sheet=2,rows=c(1:95),cols=c(1,4:20)))
View(tv_data)
tv_data$date=as.Date(as.character(tv_data$date),"%m/%d/%Y")+years(2000)
na_inds=which(is.na(tv_data$date))
for (ind in na_inds) {tv_data$date[ind]=tv_data$date[(ind-1)]+weeks(1)}
View(tv_data)
study_vars=c("date","tv.spend")
study_vars=c("date","tv.spend")
study_vars=c("date","tv.spend")
study_vars=c("date","tv.spend")
study_cols=which(names(tv_data) %in% study_vars)
tv_data=tbl_df(read.xlsx("tvanalysis.xlsx",sheet=2,rows=c(1:95),cols=c(1,4:20)))
tv_data$date=as.Date(as.character(tv_data$date),"%m/%d/%Y")+years(2000)
na_inds=which(is.na(tv_data$date))
for (ind in na_inds) {tv_data$date[ind]=tv_data$date[(ind-1)]+weeks(1)}
study_vars=c("date","tv.spend")
study_vars=c("date","tv.spend")
study_cols=which(names(tv_data) %in% study_vars)
study_cols
sub_study=tv_data[,study_cols]  %>% arrange(desc(date))
a=gs_title("channeldata with home")
gs_channeldata=a %>% gs_read(ws = "channeldata")
gs_channeldataroot=a %>% gs_read(ws = "channeldataroot")
channel_home_levels=levels(as.factor(gs_channeldataroot$ga.channelGrouping))
channel_home_levels
gs_channeldataroot
for (lev in channel_home_levels) {
for (lev in channel_home_levels) {
}
library(tidyr)
library(dplyr)
library(openxlsx)
library(lubridate)
library(ggplot2)
library(gridExtra)
library(forecast)
library(stats)
library(pander)
library(TTR)
library(googlesheets)
source("arima_formula.R")
load(file="channel_sessions_long.rda")
channel_session_gathered=channel_sessions_long %>% gather(key=channel,value=sessions,2:6)
channel_session_gathered$Units="Sessions"
channel_session_gathered$Units[which(channel_session_gathered$channel=="tv.spend")]="Dollars"
ggplot(channel_session_gathered)+theme_bw()+
geom_line(aes(x=date,y=sessions,color=channel))+
facet_grid(Units~.,scales="free")+ylab("")+xlab("Date")+
ggtitle("Weekly TV Spending And Channel Sessions")
load(file="channel_sessions_long.rda")
channel_session_gathered=channel_sessions_long %>% gather(key=channel,value=sessions,2:6)
channel_session_gathered$Units="Sessions"
channel_session_gathered$Units[which(channel_session_gathered$channel=="tv.spend")]="Dollars"
ggplot(channel_session_gathered)+theme_bw()+
geom_line(aes(x=date,y=sessions,color=channel))+
facet_grid(Units~.,scales="free")+ylab("")+xlab("Date")+
ggtitle("Weekly TV Spending And Channel Sessions")
ggtitle("Weekly TV Spending And Channel Sessions")
channel_session_gathered=channel_sessions_long %>% gather(key=channel,value=sessions,2:6)
channel_session_gathered$Units="Sessions"
channel_session_gathered$Units[which(channel_session_gathered$channel=="tv.spend")]="Dollars"
channel_session_gathered$Units[which(channel_session_gathered$channel=="tv.spend")]="Dollars"
ggplot(channel_session_gathered)+theme_bw()+
geom_line(aes(x=date,y=sessions,color=channel))+
facet_grid(Units~.,scales="free")+ylab("")+xlab("Date")+
ggtitle("Weekly TV Spending And Channel Sessions")
ggtitle("Weekly TV Spending And Channel Sessions")
ggplot(channel_session_gathered)+theme_bw()+
geom_line(aes(x=date,y=sessions,color=channel))+
facet_grid(Units~.,scales="free")+ylab("")+xlab("Date")+
ggtitle("Weekly TV Spending And Channel Sessions")
)
ggplot(channel_session_gathered)+theme_bw()+
geom_line(aes(x=date,y=sessions,color=channel))+
facet_grid(Units~.,scales="free")+ylab("")+xlab("Date")+
ggtitle("Weekly TV Spending And Channel Sessions")
study_var=channel_sessions_long$organic.net.home
study_var=channel_sessions_long$organic.net.home
study_var=channel_sessions_long$organic.net.home
study_var=channel_sessions_long$organic.net.home
na_inds=which(is.na(study_var))
tv=channel_sessions_long$tv.spend[-na_inds]
study_var=na.omit(study_var)
date=channel_sessions_long$date[-na_inds]
title_paste="Organic Net Home"
poly_fit=lm(study_var~tv+I(tv^2))
tmp_df=data.frame(round(coef(poly_fit),3))
tmp_df=rbind(tmp_df,cor(fitted(poly_fit),na.omit(study_var))^2)
rownames(tmp_df)[length(rownames(tmp_df))]="R2"
tmp_df
pander(tmp_df)
ts_var=ts(study_var, frequency = 52)
stl_obj=stl(ts_var, s.window="periodic",robust=TRUE)
plot(stl_obj)+title(paste(title_paste,"Seasonal Trend Decomposition"))
?auto.arima
tv_arima=auto.arima(study_var,xreg=c(tv),max.P=0,max.D = 0,max.Q = 0,allowdrift=FALSE,allowmean = FALSE)
summary(tv_arima)
arima_formula(tv_arima,tv)
source('~/GitHub/Ritani/arima_formula.R')
arima_formula(tv_arima,tv)
tv_arima=auto.arima(study_var,xreg=c(tv),max.P=0,max.D = 0,max.Q = 0,allowdrift=FALSE,allowmean = FALSE)
tv_arima
